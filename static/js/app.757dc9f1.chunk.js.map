{"version":3,"sources":["D2App/pages/JobList/JobList.module.css","D2App/components/FormErrorBox/FormErrorBox.module.css","D2App/components/FormFields/ParameterFields.module.css","D2App/components/Forms/JobAddForm.module.css","D2App/components/Forms/JobEditForm.module.css","D2App/components/JobDetails/JobDetails.module.css","D2App/pages/JobEdit/JobEdit.module.css","D2App/pages/JobAdd/JobAdd.module.css","D2App/components/PageWrapper/PageWrapper.module.css","D2App/components/AuthWall/selectors.js","D2App/components/AuthWall/AuthWall.js","D2App/components/Context/RefetchJobs.js","D2App/pages/JobList/selectors.js","D2App/services/history/history.js","D2App/services/history/index.js","D2App/services/server-translations/analyticsTableTypes.js","D2App/services/server-translations/jobTypesMap.js","D2App/services/server-translations/jobStatusMap.js","D2App/components/Switches/ToggleJobSwitch.js","D2App/pages/JobList/EditJobMenuItem.js","D2App/components/Modal/CronPresetModal.js","D2App/components/Modal/DeleteJobModal.js","D2App/components/Modal/DiscardFormModal.js","D2App/components/Modal/RunJobModal.js","D2App/pages/JobList/RunJobMenuItem.js","D2App/pages/JobList/DeleteJobMenuItem.js","D2App/pages/JobList/JobListActions.js","D2App/pages/JobList/JobStatus.js","D2App/pages/JobList/JobNextRun.js","D2App/services/validators/validate-cron.js","D2App/services/validators/required-cron.js","D2App/services/translate-cron/translate-cron.js","D2App/services/translate-cron/index.js","D2App/pages/JobList/JobSchedule.js","D2App/pages/JobList/JobListTableItem.js","D2App/pages/JobList/JobListTable.js","D2App/pages/JobList/JobList.js","D2App/pages/JobList/JobListContainer.js","D2App/components/Buttons/CronPresetButton.js","D2App/components/Buttons/DeleteJobButton.js","D2App/components/Buttons/DiscardFormButton.js","D2App/services/format-error/format-error.js","D2App/services/format-error/index.js","D2App/hooks/jobs/use-submit-job.js","D2App/hooks/jobs/use-update-job.js","D2App/components/FormErrorBox/FormErrorBox.js","D2App/components/FormFields/JobNameField.js","D2App/components/FormFields/JobTypeField.js","D2App/components/FormFields/selectors.js","D2App/components/FormFields/UnlabeledOptionsField.js","D2App/components/FormFields/SkipTableTypesField.js","D2App/components/FormFields/LabeledOptionsField.js","D2App/components/FormFields/ParameterFields.js","D2App/components/FormFields/CronField.js","D2App/components/FormFields/DelayField.js","D2App/components/FormFields/ScheduleField.js","D2App/components/FormFields/index.js","D2App/components/Forms/JobAddForm.js","D2App/components/Forms/JobAddFormContainer.js","D2App/components/Forms/JobEditForm.js","D2App/components/Forms/JobEditFormContainer.js","D2App/components/JobDetails/JobDetails.js","D2App/pages/JobEdit/JobEdit.js","D2App/pages/JobEdit/JobEditContainer.js","D2App/pages/JobAdd/JobAdd.js","D2App/pages/JobAdd/JobAddContainer.js","D2App/pages/NotAuthorized/NotAuthorized.js","D2App/components/Routes/Routes.js","D2App/components/PageWrapper/PageWrapper.js","D2App/components/App/App.js","D2App/components/App/index.js"],"names":["module","exports","query","me","resource","node","PropTypes","AuthWall","children","loading","error","data","useDataQuery","authorities","includes","getAuthorized","Fragment","push","to","RefetchJobsContext","createContext","Error","getEntities","jobs","reduce","entities","job","id","getIds","map","history","createHashHistory","analyticsTableTypes","DATA_VALUE","i18n","t","COMPLETENESS","COMPLETENESS_TARGET","ORG_UNIT_TARGET","EVENT","ENROLLMENT","VALIDATION_RESULT","jobTypesMap","ANALYTICS_TABLE","CONTINUOUS_ANALYTICS_TABLE","CREDENTIALS_EXPIRY_ALERT","DATA_INTEGRITY","DATA_SET_NOTIFICATION","DATA_STATISTICS","DATA_SYNC","EVENT_PROGRAMS_DATA_SYNC","FILE_RESOURCE_CLEANUP","META_DATA_SYNC","MONITORING","PREDICTOR","PROGRAM_NOTIFICATIONS","PUSH_ANALYSIS","REMOVE_EXPIRED_RESERVED_VALUES","RESOURCE_TABLE","SEND_SCHEDULED_MESSAGE","TRACKER_PROGRAMS_DATA_SYNC","VALIDATION_RESULTS_NOTIFICATION","jobStatusMap","COMPLETED","DISABLED","DONE","FAILED","NOT_STARTED","RUNNING","SCHEDULED","STOPPED","mutation","type","partial","enabled","bool","string","ToggleJobSwitch","checked","toggleJob","useDataMutation","refetch","useContext","name","disabled","onChange","then","EditJobMenuItem","dense","onClick","label","cronPresets","value","func","CronPresetModal","setCron","hideModal","currentPreset","setCurrentPreset","useState","open","small","onClose","preset","key","end","secondary","primary","DeleteJobModal","onSuccess","deleteJob","destructive","DiscardFormModal","RunJobModal","engine","useDataEngine","RunJobMenuItem","showModal","setShowModal","DeleteJobMenuItem","JobListActions","configurable","component","defaultProps","JobStatus","status","neutral","negative","positive","JobNextRun","nextExecutionTime","now","moment","Date","nextRun","utc","isSameOrBefore","propTypes","isRequired","WEEKDAYS","MONTHS","isValidNumber","number","x","y","isWildcard","field","isUndefined","isValidWithinRange","range","boundaries","split","length","isValidNumberRange","fraction","components","isValidFraction","isValidMonthField","months","firstMonth","secondMonth","m","indexOf","undefined","isAlphabeticMonth","isValidWeekdayField","weekdays","firstDay","secondDay","c","isAlphabeticWeekday","validateCron","exp","fields","trim","isValidFields","isValidMinuteField","isValidHourField","isValidDayField","requiredCron","translateCron","cron","locale","language","cronstrue","toString","JobSchedule","cronExpression","schedulingType","delay","shape","JobListTableItem","displayName","jobType","jobStatus","object","arrayOf","JobListTable","jobIds","jobEntities","JobList","isLoading","showSystemJobs","setShowSystemJobs","jobFilter","setJobFilter","className","styles","header","headerTitle","href","headerLink","target","rel","headerLinkIcon","controlContainer","dataTest","placeholder","controlRight","params","paging","JobListContainer","jobConfigurations","filteredJobs","filter","toLowerCase","getJobsMatchingFilter","getUserJobs","RefetchJobs","Provider","CronPresetButton","DeleteJobButton","DiscardFormButton","shouldConfirm","FORM_ERROR","FinalForm","formatError","details","response","validationErrors","genericErrors","errorReports","forEach","report","errorProperty","message","useSubmitJob","mutate","variables","catch","useUpdateJob","array","FormErrorBox","submitError","title","list","Field","ReactFinalForm","VALIDATOR","composeValidators","hasValue","JobNameField","InputFieldFF","validate","required","jobTypes","JobTypeField","loadingText","options","SingleSelectFieldFF","getJobTypeObject","find","getStringValue","UnlabeledOptionsField","endpoint","helpText","option","MultiSelectFieldFF","SkipTableTypesField","LabeledOptionsField","parameterName","ParameterFields","parameters","selectedJobType","jobParameters","getJobTypeParameters","parameterComponents","fieldName","klass","relativeApiEndpoint","startsWith","slice","getParameterEndpoint","parameterComponent","marginTop","SwitchFieldFF","format","useFormState","useForm","CronField","form","values","subscription","change","integer","createNumberRange","DelayField","LOWERBOUND","UPPERBOUND","ScheduleField","fieldNames","JobAddForm","handleSubmit","pristine","submitting","hasSubmitErrors","setIsPristine","subscribe","useEffect","Spinner","onSubmit","maxWidth","formButtonContainer","icon","saveButton","Form","JobAddFormContainer","submitJob","destroyOnUnregister","JobEditForm","deleteButton","join","JobEditFormContainer","useParams","updateJob","initialValues","JobDetails","created","lastExecutedStatus","lastExecuted","createdFromNow","from","translatedStatus","lastRunFromNow","wrapper","nsSeparator","JobEdit","isPristine","pageHeader","pageHeaderButton","pageHeaderTitle","card","cardHeader","cardHeaderTitle","cardHeaderLink","cardHeaderInfo","JobEditContainer","JobAdd","JobAddContainer","NotAuthorized","Routes","exact","path","PageWrapper","App","spacers","colors"],"mappings":"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","file":"static/js/app.757dc9f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"JobList_header__23tFt\",\"headerTitle\":\"JobList_headerTitle__21D__\",\"headerLink\":\"JobList_headerLink__2zepi\",\"headerLinkIcon\":\"JobList_headerLinkIcon__XdfBB\",\"controlContainer\":\"JobList_controlContainer__3Yzj_\",\"controlRight\":\"JobList_controlRight__38lfB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FormErrorBox_list__3BejY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerTitle\":\"ParameterFields_headerTitle__IBF76\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButtonContainer\":\"JobAddForm_formButtonContainer__1MLSp\",\"saveButton\":\"JobAddForm_saveButton__RfxZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButtonContainer\":\"JobEditForm_formButtonContainer__2b6Fi\",\"deleteButton\":\"JobEditForm_deleteButton__VQxBE\",\"saveButton\":\"JobEditForm_saveButton__278Ab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"JobDetails_wrapper__1-YkO\",\"title\":\"JobDetails_title__1Cht7\",\"details\":\"JobDetails_details__2HITJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"JobEdit_pageHeader__3Fywp\",\"pageHeaderButton\":\"JobEdit_pageHeaderButton__29yjJ\",\"pageHeaderTitle\":\"JobEdit_pageHeaderTitle__jZrIG\",\"card\":\"JobEdit_card__2QqEg\",\"cardHeader\":\"JobEdit_cardHeader__Mv_cj\",\"cardHeaderTitle\":\"JobEdit_cardHeaderTitle__29Y64\",\"cardHeaderInfo\":\"JobEdit_cardHeaderInfo__3VWZt\",\"cardHeaderLink\":\"JobEdit_cardHeaderLink__2frj7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"JobAdd_pageHeader__2NZzc\",\"pageHeaderButton\":\"JobAdd_pageHeaderButton__Xg_R9\",\"pageHeaderTitle\":\"JobAdd_pageHeaderTitle__1RMl0\",\"card\":\"JobAdd_card__1HH6H\",\"cardHeader\":\"JobAdd_cardHeader__1D3sS\",\"cardHeaderTitle\":\"JobAdd_cardHeaderTitle__2TG9a\",\"cardHeaderInfo\":\"JobAdd_cardHeaderInfo__vq_Y1\",\"cardHeaderLink\":\"JobAdd_cardHeaderLink__2CzPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PageWrapper_wrapper__t-CJy\"};","export const getAuthorized = me => {\n  const {\n    authorities\n  } = me;\n\n  if (!authorities) {\n    return false;\n  }\n\n  const isAuthorized = authorities.includes('ALL') || authorities.includes('F_SCHEDULING_ADMIN');\n  return isAuthorized;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { CircularLoader, Layer, CenteredContent } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { getAuthorized } from './selectors';\nconst query = {\n  me: {\n    resource: 'me'\n  }\n};\n\nconst AuthWall = ({\n  children\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query);\n\n  if (loading) {\n    return <Layer>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  if (error) {\n    /**\n     * The app can't continue if this fails, because it doesn't\n     * know if the user is authorized, so throw the error.\n     */\n    throw error;\n  }\n\n  const isAuthorized = getAuthorized(data.me);\n\n  if (!isAuthorized) {\n    return <Redirect push to=\"/notauthorized\" />;\n  }\n\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nconst {\n  node\n} = PropTypes;\nAuthWall.propTypes = {\n  children: node.isRequired\n};\nexport default AuthWall;","import { createContext } from 'react';\nconst message = 'RefetchJobsContext consumer needs to have a valid Provider as parent'; // Throws an error if the consumer is not nested in a provider\n\nconst RefetchJobsContext = createContext(() => {\n  throw new Error(message);\n});\nexport default RefetchJobsContext;","// Returns an object of jobs, indexed by their ids\nexport const getEntities = jobs => jobs.reduce((entities, job) => {\n  const id = job.id;\n  entities[id] = job;\n  return entities;\n}, {}); // Returns an array of job ids\n\nexport const getIds = jobs => jobs.map(job => job.id); // Returns jobs that can be configured by the user, which are user created jobs\n\nexport const getUserJobs = jobs => jobs.filter(job => job.configurable); // Returns jobs whose name matches (a part of) the filter, case insensitive\n\nexport const getJobsMatchingFilter = (jobs, filter) => jobs.filter(job => job.name.toLowerCase().includes(filter.toLowerCase()));","import { createHashHistory } from 'history';\nconst history = createHashHistory();\nexport default history;","import history from './history';\nexport default history;","import i18n from '@dhis2/d2-i18n';\nconst analyticsTableTypes = {\n  DATA_VALUE: i18n.t('Data value'),\n  COMPLETENESS: i18n.t('Completeness'),\n  COMPLETENESS_TARGET: i18n.t('Completeness target'),\n  ORG_UNIT_TARGET: i18n.t('Org unit target'),\n  EVENT: i18n.t('Event'),\n  ENROLLMENT: i18n.t('Enrollment'),\n  VALIDATION_RESULT: i18n.t('Validation result')\n};\nexport default analyticsTableTypes;","import i18n from '@dhis2/d2-i18n';\nconst jobTypesMap = {\n  ANALYTICS_TABLE: i18n.t('Analytics table'),\n  CONTINUOUS_ANALYTICS_TABLE: i18n.t('Continuous analytics table'),\n  CREDENTIALS_EXPIRY_ALERT: i18n.t('Credentials expiry alert'),\n  DATA_INTEGRITY: i18n.t('Data integrity'),\n  DATA_SET_NOTIFICATION: i18n.t('Dataset notification'),\n  DATA_STATISTICS: i18n.t('Data statistics'),\n  DATA_SYNC: i18n.t('Data sync'),\n  EVENT_PROGRAMS_DATA_SYNC: i18n.t('Event programs data sync'),\n  FILE_RESOURCE_CLEANUP: i18n.t('File resource clean up'),\n  META_DATA_SYNC: i18n.t('Meta data sync'),\n  MONITORING: i18n.t('Monitoring'),\n  PREDICTOR: i18n.t('Predictor'),\n  PROGRAM_NOTIFICATIONS: i18n.t('Program notifications'),\n  PUSH_ANALYSIS: i18n.t('Push analysis'),\n  REMOVE_EXPIRED_RESERVED_VALUES: i18n.t('Remove expired reserved values'),\n  RESOURCE_TABLE: i18n.t('Resource table'),\n  SEND_SCHEDULED_MESSAGE: i18n.t('Send scheduled message'),\n  TRACKER_PROGRAMS_DATA_SYNC: i18n.t('Tracker programs data sync'),\n  VALIDATION_RESULTS_NOTIFICATION: i18n.t('Validation results notification')\n};\nexport default jobTypesMap;","import i18n from '@dhis2/d2-i18n';\nconst jobStatusMap = {\n  COMPLETED: i18n.t('Completed'),\n  DISABLED: i18n.t('Disabled'),\n  DONE: i18n.t('Done'),\n  FAILED: i18n.t('Failed'),\n  NOT_STARTED: i18n.t('Not started'),\n  RUNNING: i18n.t('Running'),\n  SCHEDULED: i18n.t('Scheduled'),\n  STOPPED: i18n.t('Stopped')\n};\nexport default jobStatusMap;","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Switch } from '@dhis2/ui';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport { RefetchJobsContext } from '../Context';\n/* istanbul ignore next */\n\nconst mutation = {\n  resource: 'jobConfigurations',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  partial: true,\n  data: ({\n    enabled\n  }) => ({\n    enabled\n  })\n};\n\nconst ToggleJobSwitch = ({\n  id,\n  checked\n}) => {\n  const [toggleJob, {\n    loading\n  }] = useDataMutation(mutation);\n  const refetch = useContext(RefetchJobsContext);\n  const enabled = !checked;\n  return <Switch name={`toggle-job-${id}`} disabled={loading} checked={checked} onChange={() => {\n    toggleJob({\n      id,\n      enabled\n    }).then(() => refetch());\n  }} />;\n};\n\nconst {\n  bool,\n  string\n} = PropTypes;\nToggleJobSwitch.propTypes = {\n  checked: bool.isRequired,\n  id: string.isRequired\n};\nexport default ToggleJobSwitch;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\n\nconst EditJobMenuItem = ({\n  id\n}) => <MenuItem dense onClick={() => history.push(`/edit/${id}`)} label={i18n.t('Edit')} />;\n\nconst {\n  string\n} = PropTypes;\nEditJobMenuItem.propTypes = {\n  id: string.isRequired\n};\nexport default EditJobMenuItem;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalTitle, ModalContent, ModalActions, ButtonStrip, Radio } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nconst cronPresets = [{\n  label: i18n.t('Every hour'),\n  value: '0 0 * ? * *'\n}, {\n  label: i18n.t('Every day at midnight'),\n  value: '0 0 1 ? * *'\n}, {\n  label: i18n.t('Every day at 3 am'),\n  value: '0 0 3 ? * *'\n}, {\n  label: i18n.t('Every day at noon'),\n  value: '0 0 12 ? * MON-FRI'\n}, {\n  label: i18n.t('Every week'),\n  value: '0 0 3 ? * MON'\n}];\n\nconst CronPresetModal = ({\n  setCron,\n  hideModal\n}) => {\n  const [currentPreset, setCurrentPreset] = useState('');\n  return <Modal open small onClose={hideModal}>\n            <ModalTitle>{i18n.t('Choose a preset time/interval')}</ModalTitle>\n            <ModalContent>\n                {cronPresets.map(preset => <Radio {...preset} checked={currentPreset === preset.value} key={preset.value} onChange={({\n        value\n      }) => setCurrentPreset(value)} />)}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button secondary onClick={hideModal} name=\"hide-modal\">\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button primary name=\"insert-preset\" disabled={!currentPreset} onClick={() => {\n          hideModal();\n          setCron(currentPreset);\n        }}>\n                        {i18n.t('Insert preset')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func\n} = PropTypes;\nCronPresetModal.propTypes = {\n  hideModal: func.isRequired,\n  setCron: func.isRequired\n};\nexport default CronPresetModal;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataMutation } from '@dhis2/app-runtime';\nconst mutation = {\n  resource: 'jobConfigurations',\n  id:\n  /* istanbul ignore next */\n  ({\n    id\n  }) => id,\n  type: 'delete'\n};\n\nconst DeleteJobModal = ({\n  id,\n  hideModal,\n  onSuccess\n}) => {\n  const [deleteJob] = useDataMutation(mutation);\n  return <Modal open small onClose={hideModal}>\n            <ModalContent>\n                {i18n.t('Are you sure you want to delete this job?')}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button name=\"hide-modal\" secondary onClick={hideModal}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button name={`delete-job-${id}`} destructive onClick={() => {\n          deleteJob({\n            id\n          }).then(() => {\n            hideModal();\n            onSuccess();\n          });\n        }}>\n                        {i18n.t('Delete')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func,\n  string\n} = PropTypes;\nDeleteJobModal.propTypes = {\n  hideModal: func.isRequired,\n  id: string.isRequired,\n  onSuccess: func.isRequired\n};\nexport default DeleteJobModal;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\n\nconst DiscardFormModal = ({\n  hideModal\n}) => <Modal open small onClose={hideModal}>\n        <ModalContent>\n            {i18n.t('Are you sure you want to discard this form?')}\n        </ModalContent>\n        <ModalActions>\n            <ButtonStrip end>\n                <Button name=\"cancel-discard-form\" secondary onClick={hideModal}>\n                    {i18n.t('Cancel')}\n                </Button>\n                <Button name=\"discard-form\" destructive onClick={() => {\n        hideModal();\n        history.push('/');\n      }}>\n                    {i18n.t('Discard')}\n                </Button>\n            </ButtonStrip>\n        </ModalActions>\n    </Modal>;\n\nconst {\n  func\n} = PropTypes;\nDiscardFormModal.propTypes = {\n  hideModal: func.isRequired\n};\nexport default DiscardFormModal;","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { RefetchJobsContext } from '../Context';\n\nconst RunJobModal = ({\n  id,\n  hideModal\n}) => {\n  const engine = useDataEngine();\n  const query = {\n    jobs: {\n      resource: `jobConfigurations/${id}/execute`\n    }\n  };\n\n  const runJob = () => engine.query(query);\n\n  const refetch = useContext(RefetchJobsContext);\n  return <Modal open small onClose={hideModal}>\n            <ModalContent>\n                {i18n.t('Are you sure you want to run this job?')}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button name=\"hide-modal\" secondary onClick={hideModal}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button name={`run-job-${id}`} primary onClick={() => {\n          runJob().then(() => {\n            hideModal();\n            refetch();\n          });\n        }}>\n                        {i18n.t('Run')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func,\n  string\n} = PropTypes;\nRunJobModal.propTypes = {\n  hideModal: func.isRequired,\n  id: string.isRequired\n};\nexport default RunJobModal;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { RunJobModal } from '../../components/Modal';\n\nconst RunJobMenuItem = ({\n  id\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <MenuItem dense onClick={() => {\n      setShowModal(true);\n    }} label={i18n.t('Run manually')} />\n            {showModal && <RunJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} />}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nRunJobMenuItem.propTypes = {\n  id: string.isRequired\n};\nexport default RunJobMenuItem;","import React, { useState, useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DeleteJobModal } from '../../components/Modal';\nimport { RefetchJobsContext } from '../../components/Context';\n\nconst DeleteJobMenuItem = ({\n  id\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const refetch = useContext(RefetchJobsContext);\n  return <React.Fragment>\n            <MenuItem dense destructive onClick={() => {\n      setShowModal(true);\n    }} label={i18n.t('Delete')} />\n            {showModal && <DeleteJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} onSuccess={refetch} />}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nDeleteJobMenuItem.propTypes = {\n  id: string.isRequired\n};\nexport default DeleteJobMenuItem;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FlyoutMenu, DropdownButton } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport EditJobMenuItem from './EditJobMenuItem';\nimport RunJobMenuItem from './RunJobMenuItem';\nimport DeleteJobMenuItem from './DeleteJobMenuItem';\n\nconst JobListActions = ({\n  id,\n  configurable\n}) => <DropdownButton small component={<FlyoutMenu>\n                {configurable && <EditJobMenuItem id={id} />}\n                <RunJobMenuItem id={id} />\n                <DeleteJobMenuItem id={id} />\n            </FlyoutMenu>}>\n        {i18n.t('Actions')}\n    </DropdownButton>;\n\nJobListActions.defaultProps = {\n  configurable: false\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nJobListActions.propTypes = {\n  id: string.isRequired,\n  configurable: bool\n};\nexport default JobListActions;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Tag } from '@dhis2/ui';\nimport { jobStatusMap } from '../../services/server-translations';\n\nconst JobStatus = ({\n  status\n}) => {\n  switch (status) {\n    case 'STOPPED':\n    case 'DISABLED':\n      return <Tag>{jobStatusMap[status]}</Tag>;\n\n    case 'RUNNING':\n    case 'NOT_STARTED':\n    case 'SCHEDULED':\n      return <Tag neutral>{jobStatusMap[status]}</Tag>;\n\n    case 'FAILED':\n      return <Tag negative>{jobStatusMap[status]}</Tag>;\n\n    case 'DONE':\n      return <Tag positive>{jobStatusMap[status]}</Tag>;\n    // Unrecognised status\n\n    default:\n      return null;\n  }\n};\n\nconst {\n  string\n} = PropTypes;\nJobStatus.propTypes = {\n  status: string.isRequired\n};\nexport default JobStatus;","import moment from 'moment';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\n\nconst JobNextRun = ({\n  nextExecutionTime,\n  enabled\n}) => {\n  if (!enabled || !nextExecutionTime) {\n    return '-';\n  }\n\n  const now = moment(Date.now());\n  /**\n   * The recommendation is to run dhis2 on a server set to UTC time.\n   * In that case this timestamp is also UTC. If those recommendations\n   * weren't followed the time could be off, but there's nothing\n   * we can do to detect that.\n   */\n\n  const nextRun = moment.utc(nextExecutionTime);\n  const nextRunIsInPast = nextRun.isSameOrBefore(now, 'minute');\n  /**\n   * If the time is in the past, that could mean that the task is running,\n   * and the nextExecutionTime hasn't been updated yet.\n   */\n\n  if (nextRunIsInPast) {\n    return i18n.t('Not scheduled');\n  }\n\n  return now.to(nextRun);\n};\n\nconst {\n  bool,\n  string\n} = PropTypes;\nJobNextRun.propTypes = {\n  enabled: bool.isRequired,\n  nextExecutionTime: string\n};\nexport default JobNextRun;","const WEEKDAYS = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];\nconst MONTHS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n\nconst isValidFields = fields => fields && fields.length === 6;\n\nconst isValidNumber = (number, x, y) => number >= x && number <= y;\n\nconst isWildcard = field => field === '*';\n\nconst isUndefined = field => field === '?';\n\nconst isValidNumberRange = (range, x, y) => {\n  const boundaries = range.split('-');\n  if (!boundaries || boundaries.length !== 2) return false;\n  return isValidNumber(boundaries[0], x, y) && isValidNumber(boundaries[1], x, y) && boundaries[0] <= boundaries[1];\n};\n\nconst isValidFraction = (fraction, x, y) => {\n  const components = fraction.split('/');\n  if (!components || components.length !== 2) return false;\n  /* istanbul ignore next */\n\n  return (isWildcard(components[0]) || isValidNumber(components[0], x, y)) && isValidNumber(components[1], x, y);\n};\n\nconst isAlphabeticWeekday = field => {\n  const weekdays = field.split('-');\n  const [firstDay, secondDay] = weekdays.map(c => WEEKDAYS.indexOf(c));\n  return firstDay !== -1 && secondDay === undefined || firstDay !== -1 && secondDay !== -1 && firstDay <= secondDay;\n};\n\nconst isAlphabeticMonth = field => {\n  const months = field.split('-');\n  const [firstMonth, secondMonth] = months.map(m => MONTHS.indexOf(m));\n  /* istanbul ignore next */\n\n  return firstMonth !== -1 && secondMonth === undefined || firstMonth !== -1 && secondMonth !== -1 && firstMonth <= secondMonth;\n};\n\nconst isValidWithinRange = (field, x, y) => isWildcard(field) || isValidNumber(field, x, y) || isValidNumberRange(field, x, y) || isValidFraction(field, x, y);\n\nconst isValidSecondField = field => isValidWithinRange(field, 0, 59);\n\nconst isValidMinuteField = field => isValidWithinRange(field, 0, 59);\n\nconst isValidHourField = field => isValidWithinRange(field, 0, 23);\n\nconst isValidDayField = field => isValidWithinRange(field, 0, 31) || isUndefined(field);\n\nconst isValidMonthField = field => isValidWithinRange(field, 1, 12) || isAlphabeticMonth(field);\n\nconst isValidWeekdayField = field => isValidWithinRange(field, 1, 7) || isAlphabeticWeekday(field) || isUndefined(field);\n/**\n * Cron expression validation. Validates the Spring Scheduling pattern.\n * Format: <second> <minute> <hour> <day-of-month> <month> <day-of-week>\n * Source code: https://git.io/vpoqG\n * Documentation: https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html\n */\n\n\nconst validateCron = exp => {\n  if (!exp) {\n    return false;\n  }\n\n  const fields = exp.trim().split(' ');\n\n  if (!isValidFields(fields)) {\n    return false;\n  }\n\n  return isValidSecondField(fields[0]) && isValidMinuteField(fields[1]) && isValidHourField(fields[2]) && isValidDayField(fields[3]) && isValidMonthField(fields[4]) && isValidWeekdayField(fields[5]);\n};\n\nexport default validateCron;","import i18n from '@dhis2/d2-i18n';\nimport validateCron from './validate-cron';\n\nconst requiredCron = value => {\n  const isString = typeof value === 'string';\n  const isFilled = isString && value.length > 0;\n\n  if (!isFilled) {\n    return i18n.t('A CRON expression is required');\n  }\n\n  if (!validateCron(value)) {\n    return i18n.t('Please enter a valid CRON expression');\n  }\n\n  return undefined;\n};\n\nexport default requiredCron;","import cronstrue from 'cronstrue/i18n';\nimport i18n from '@dhis2/d2-i18n';\nimport { validateCron } from '../validators';\nconst fallback = 'en';\n\nconst translateCron = cron => {\n  const locale = i18n.language || fallback;\n  const isValid = cron && validateCron(cron);\n\n  if (!isValid) {\n    return '';\n  }\n\n  return cronstrue.toString(cron, {\n    locale\n  });\n};\n\nexport default translateCron;","import translateCron from './translate-cron';\nexport default translateCron;","import { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport translateCron from '../../services/translate-cron';\n\nconst JobSchedule = ({\n  cronExpression,\n  schedulingType,\n  delay\n}) => {\n  switch (schedulingType) {\n    case 'CRON':\n      return translateCron(cronExpression);\n\n    case 'FIXED_DELAY':\n      return i18n.t('{{ delay }} seconds after last run', {\n        delay\n      });\n\n    default:\n      // Unrecognised or invalid type\n      return '-';\n  }\n};\n\nconst {\n  string,\n  number\n} = PropTypes;\nJobSchedule.propTypes = {\n  schedulingType: string.isRequired,\n  cronExpression: string,\n  delay: number\n};\nexport default JobSchedule;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { TableRow, TableCell } from '@dhis2/ui';\nimport { jobTypesMap } from '../../services/server-translations';\nimport { ToggleJobSwitch } from '../../components/Switches';\nimport JobListActions from './JobListActions';\nimport JobStatus from './JobStatus';\nimport JobNextRun from './JobNextRun';\nimport JobSchedule from './JobSchedule';\n\nconst JobListTableItem = ({\n  job: {\n    id,\n    displayName,\n    jobType,\n    cronExpression,\n    delay,\n    jobStatus,\n    nextExecutionTime,\n    schedulingType,\n    enabled,\n    configurable\n  }\n}) => <TableRow>\n        <TableCell>{displayName}</TableCell>\n        <TableCell>{jobTypesMap[jobType]}</TableCell>\n        <TableCell>\n            <JobSchedule cronExpression={cronExpression} delay={delay} schedulingType={schedulingType} />\n        </TableCell>\n        <TableCell>\n            <JobNextRun nextExecutionTime={nextExecutionTime} enabled={enabled} />\n        </TableCell>\n        <TableCell>\n            <JobStatus status={jobStatus} />\n        </TableCell>\n        <TableCell>\n            <ToggleJobSwitch id={id} checked={enabled} />\n        </TableCell>\n        <TableCell>\n            <JobListActions id={id} configurable={configurable} />\n        </TableCell>\n    </TableRow>;\n\nconst {\n  shape,\n  string,\n  bool,\n  number\n} = PropTypes;\nJobListTableItem.propTypes = {\n  job: shape({\n    displayName: string.isRequired,\n    enabled: bool.isRequired,\n    id: string.isRequired,\n    jobStatus: string.isRequired,\n    jobType: string.isRequired,\n    schedulingType: string.isRequired,\n    cronExpression: string,\n    delay: number,\n    nextExecutionTime: string\n  }).isRequired\n};\nexport default JobListTableItem;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport JobListTableItem from './JobListTableItem';\n\nconst JobListTable = ({\n  jobIds,\n  jobEntities\n}) => <Table>\n        <TableHead>\n            <TableRowHead>\n                <TableCellHead>{i18n.t('Job name')}</TableCellHead>\n                <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                <TableCellHead>{i18n.t('Schedule')}</TableCellHead>\n                <TableCellHead>{i18n.t('Next run')}</TableCellHead>\n                <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                <TableCellHead>{i18n.t('On/off')}</TableCellHead>\n                <TableCellHead />\n            </TableRowHead>\n        </TableHead>\n        <TableBody>\n            {jobIds.length === 0 ? <TableRow>\n                    <TableCell>{i18n.t('No jobs to display')}</TableCell>\n                </TableRow> : jobIds.map(id => <JobListTableItem key={id} job={jobEntities[id]} />)}\n        </TableBody>\n    </Table>;\n\nconst {\n  object,\n  arrayOf,\n  string\n} = PropTypes;\nJobListTable.propTypes = {\n  jobEntities: object.isRequired,\n  jobIds: arrayOf(string).isRequired\n};\nexport default JobListTable;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, Switch, Input, Button, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\nimport JobListTable from './JobListTable';\nimport styles from './JobList.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobList = ({\n  jobIds,\n  jobEntities,\n  isLoading,\n  showSystemJobs,\n  setShowSystemJobs,\n  jobFilter,\n  setJobFilter\n}) => {\n  return <React.Fragment>\n            <header className={styles.header}>\n                <h1 className={styles.headerTitle}>\n                    {i18n.t('Scheduled jobs')}\n                </h1>\n                <a href={infoLink} className={styles.headerLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.headerLinkIcon}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <Card>\n                <div className={styles.controlContainer}>\n                    <Input dataTest=\"job-filter-input\" placeholder={i18n.t('Filter jobs')} onChange={({\n          value\n        }) => {\n          setJobFilter(value);\n        }} value={jobFilter} />\n                    <div className={styles.controlRight}>\n                        <Switch dataTest=\"job-toggle-switch\" checked={showSystemJobs} disabled={isLoading} label={i18n.t('Show system jobs')} onChange={({\n            checked\n          }) => {\n            setShowSystemJobs(checked);\n          }} />\n                        <Button dataTest=\"new-job-button\" onClick={() => {\n            history.push('/add');\n          }}>\n                            {i18n.t('New job')}\n                        </Button>\n                    </div>\n                </div>\n                <JobListTable jobIds={jobIds} jobEntities={jobEntities} />\n            </Card>\n        </React.Fragment>;\n};\n\nconst {\n  bool,\n  object,\n  string,\n  arrayOf,\n  func\n} = PropTypes;\nJobList.propTypes = {\n  isLoading: bool.isRequired,\n  jobEntities: object.isRequired,\n  jobFilter: string.isRequired,\n  jobIds: arrayOf(string).isRequired,\n  setJobFilter: func.isRequired,\n  setShowSystemJobs: func.isRequired,\n  showSystemJobs: bool.isRequired\n};\nexport default JobList;","import React, { useState } from 'react';\nimport { CircularLoader, Layer, CenteredContent } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { RefetchJobsContext } from '../../components/Context';\nimport { getIds, getUserJobs, getEntities, getJobsMatchingFilter } from './selectors';\nimport JobList from './JobList';\nconst query = {\n  jobs: {\n    resource: 'jobConfigurations',\n    params: {\n      fields: '*',\n      paging: false\n    }\n  }\n};\n\nconst JobListContainer = () => {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query);\n  const [showSystemJobs, setShowSystemJobs] = useState(false);\n  const [jobFilter, setJobFilter] = useState(''); // Show spinner when there are no jobs to display yet\n\n  if (loading) {\n    return <Layer>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  if (error) {\n    /**\n     * If we don't have any data to render this route is\n     * useless, so throw the error and let the user know\n     * they should refresh.\n     */\n    throw error;\n  }\n\n  const jobs = data.jobs.jobConfigurations; // Filter jobs by the jobFilter string\n\n  const filteredJobs = getJobsMatchingFilter(jobs, jobFilter); // Show or hide system jobs\n\n  const jobIds = showSystemJobs ? getIds(filteredJobs) : getIds(getUserJobs(filteredJobs));\n  return <RefetchJobsContext.Provider value={refetch}>\n            <JobList jobIds={jobIds} jobEntities={getEntities(jobs)} isLoading={loading} showSystemJobs={showSystemJobs} setShowSystemJobs={setShowSystemJobs} jobFilter={jobFilter} setJobFilter={setJobFilter} />\n        </RefetchJobsContext.Provider>;\n};\n\nexport default JobListContainer;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { CronPresetModal } from '../Modal';\n\nconst CronPresetButton = ({\n  setCron,\n  small\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <Button onClick={() => setShowModal(true)} small={small}>\n                {i18n.t('Choose from preset times')}\n            </Button>\n            {showModal && <CronPresetModal hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} setCron={setCron} />}\n        </React.Fragment>;\n};\n\nCronPresetButton.defaultProps = {\n  small: false\n};\nconst {\n  func,\n  bool\n} = PropTypes;\nCronPresetButton.propTypes = {\n  setCron: func.isRequired,\n  small: bool\n};\nexport default CronPresetButton;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DeleteJobModal } from '../Modal';\n\nconst DeleteJobButton = ({\n  id,\n  onSuccess\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <Button destructive onClick={() => setShowModal(true)}>\n                {i18n.t('Delete job')}\n            </Button>\n            {showModal && <DeleteJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} onSuccess={onSuccess} />}\n        </React.Fragment>;\n};\n\nconst {\n  string,\n  func\n} = PropTypes;\nDeleteJobButton.propTypes = {\n  id: string.isRequired,\n  onSuccess: func.isRequired\n};\nexport default DeleteJobButton;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport history from '../../services/history';\nimport { DiscardFormModal } from '../Modal';\n\nconst DiscardFormButton = ({\n  shouldConfirm,\n  children,\n  small,\n  className\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const onClick = shouldConfirm ? () => setShowModal(true) : () => history.push('/');\n  return <React.Fragment>\n            <Button onClick={onClick} small={small} className={className}>\n                {children}\n            </Button>\n            {showModal && <DiscardFormModal hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} />}\n        </React.Fragment>;\n};\n\nDiscardFormButton.defaultProps = {\n  className: '',\n  shouldConfirm: false,\n  small: false\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nDiscardFormButton.propTypes = {\n  children: string.isRequired,\n  className: string,\n  shouldConfirm: bool,\n  small: bool\n};\nexport default DiscardFormButton;","import { FinalForm } from '@dhis2/ui';\nconst {\n  FORM_ERROR\n} = FinalForm;\n/**\n * Formats the errors returned by our backend to a format that final-form can parse\n */\n\nconst formatError = error => {\n  const {\n    details: {\n      response\n    }\n  } = error;\n  const validationErrors = {};\n  /**\n   * Some backend errors do not have a way for us to infer the related field,\n   * those can be put in genericErrors\n   */\n\n  const genericErrors = [];\n\n  if (response.errorReports && response.errorReports.length) {\n    response.errorReports.forEach(report => {\n      /**\n       * errorProperty is how the backend indicates the field that the error\n       * is related to. If we know this, return it as a field specific error\n       * (note that this will swallow errors if the backend indicates a field\n       * that does not exist in the frontend). Otherwise we'll push it to the\n       * generic errors.\n       */\n      if (report.errorProperty) {\n        validationErrors[report.errorProperty] = report.message;\n      } else {\n        genericErrors.push(report.message);\n      }\n    });\n  }\n\n  if (genericErrors.length > 0) {\n    validationErrors[FORM_ERROR] = genericErrors;\n  }\n\n  return validationErrors;\n};\n\nexport default formatError;","import formatError from './format-error';\nexport default formatError;","import { useDataEngine } from '@dhis2/app-runtime';\nimport history from '../../services/history';\nimport formatError from '../../services/format-error';\nconst mutation = {\n  resource: 'jobConfigurations',\n  type: 'create',\n  data:\n  /* istanbul ignore next */\n  ({\n    job\n  }) => job\n};\n\nconst useSubmitJob = () => {\n  const engine = useDataEngine();\n\n  const submitJob = job => engine.mutate(mutation, {\n    variables: {\n      job\n    }\n  }).then(() => {\n    history.push('/');\n  }).catch(error => {\n    const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n    if (isValidationError) {\n      return formatError(error);\n    } // Throw any unexpected errors\n\n\n    throw error;\n  });\n\n  return [submitJob];\n};\n\nexport default useSubmitJob;","import { useDataEngine } from '@dhis2/app-runtime';\nimport history from '../../services/history';\nimport formatError from '../../services/format-error';\nconst mutation = {\n  resource: 'jobConfigurations',\n  type: 'update',\n  id:\n  /* istanbul ignore next */\n  ({\n    id\n  }) => id,\n  data:\n  /* istanbul ignore next */\n  ({\n    job\n  }) => job\n};\n\nconst useUpdateJob = ({\n  id\n}) => {\n  const engine = useDataEngine();\n\n  const updateJob = job => engine.mutate(mutation, {\n    variables: {\n      job,\n      id\n    }\n  }).then(() => {\n    history.push('/');\n  }).catch(error => {\n    const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n    if (isValidationError) {\n      return formatError(error);\n    } // Throw any unexpected errors\n\n\n    throw error;\n  });\n\n  return [updateJob];\n};\n\nexport default useUpdateJob;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { NoticeBox } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './FormErrorBox.module.css';\n\nconst FormErrorBox = ({\n  submitError\n}) => {\n  const hasGenericSubmitErrors = submitError.length > 0;\n\n  if (!hasGenericSubmitErrors) {\n    return null;\n  }\n\n  return <NoticeBox error title={i18n.t('Something went wrong whilst creating your job')}>\n            <ul className={styles.list}>\n                {submitError.map(error => <li key={error}>{error}</li>)}\n            </ul>\n        </NoticeBox>;\n};\n\nconst {\n  array\n} = PropTypes;\nFormErrorBox.propTypes = {\n  submitError: array.isRequired\n};\nexport default FormErrorBox;","import React from 'react';\nimport { ReactFinalForm, InputFieldFF, composeValidators, hasValue, string } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nconst {\n  Field\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'name';\nconst VALIDATOR = composeValidators(string, hasValue);\n\nconst JobNameField = () => <Field name={FIELD_NAME} component={InputFieldFF} validate={VALIDATOR} label={i18n.t('Name')} type=\"text\" required />;\n\nexport default JobNameField;","import React from 'react';\nimport { ReactFinalForm, SingleSelectFieldFF, SingleSelectField, composeValidators, hasValue, string } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { jobTypesMap } from '../../services/server-translations';\nconst {\n  Field\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nexport const FIELD_NAME = 'jobType';\nconst VALIDATOR = composeValidators(string, hasValue);\nconst query = {\n  jobTypes: {\n    resource: 'jobConfigurations/jobTypes'\n  }\n};\n\nconst JobTypeField = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query);\n\n  if (loading) {\n    return <SingleSelectField loading loadingText={i18n.t('Loading')} label={i18n.t('Job type')} required />;\n  }\n\n  if (error) {\n    /**\n     * We need the data, so throw the error if it\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  const options = data.jobTypes.jobTypes.map(({\n    jobType\n  }) => ({\n    value: jobType,\n    label: jobTypesMap[jobType]\n  }));\n  return <Field name={FIELD_NAME} validate={VALIDATOR} component={SingleSelectFieldFF} options={options} label={i18n.t('Job type')} required />;\n};\n\nexport default JobTypeField;","/**\n * Cleans up the endpoint for use with the data engine\n */\nexport const getParameterEndpoint = endpoint => {\n  if (!endpoint || !endpoint.startsWith('/api/')) {\n    return endpoint;\n  } // Remove the '/api/'\n\n\n  return endpoint.slice(5);\n};\n/**\n * Find a jobType object by the jobType string\n */\n\nexport const getJobTypeObject = (jobTypes, jobType) => {\n  return jobTypes.find(job => job.jobType === jobType);\n};\n/**\n * Returns an array with all parameters for a certain jobType\n */\n\nexport const getJobTypeParameters = (jobTypes, jobType) => {\n  const selectedJobType = getJobTypeObject(jobTypes, jobType);\n  const hasParameters = 'jobParameters' in selectedJobType;\n\n  if (!hasParameters) {\n    return [];\n  }\n\n  return selectedJobType.jobParameters;\n};\n/**\n * Our backend returns certain values as a number, but our\n * inputs expect and return a string, so we're formatting them to strings\n */\n\nexport const getStringValue = value => {\n  if (typeof value === 'number') {\n    return value.toString();\n  }\n\n  return value;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { MultiSelectField, ReactFinalForm, MultiSelectFieldFF } from '@dhis2/ui';\nconst {\n  Field\n} = ReactFinalForm;\nconst query = {\n  options: {\n    resource: '/',\n    id:\n    /* istanbul ignore next */\n    ({\n      id\n    }) => id,\n    params: {\n      paging: false\n    }\n  }\n};\n/**\n * An unlabeled options field has options that are just values, as opposed\n * to the labeled options field, where the options have labels as well as\n * values.\n */\n\nconst UnlabeledOptionsField = ({\n  endpoint,\n  label,\n  name\n}) => {\n  /**\n   * HACK: this is a bit of a hack to allow using the useDataQuery hook with\n   * a dynamic query. Initially we used a custom hook for this but that\n   * replicated all of the internal logic of the useDataQuery hook so this\n   * seems like a better trade-off.\n   */\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      id: endpoint\n    }\n  });\n\n  if (loading) {\n    return <MultiSelectField loading label={label} />;\n  }\n\n  if (error) {\n    /**\n     * We need these values, so throw the error if they\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  if (data.options.length === 0) {\n    return <MultiSelectField disabled helpText={i18n.t('No options available')} label={label} />;\n  }\n\n  const options = data.options.map(option => ({\n    value: option,\n    label: option\n  }));\n  return <Field name={name} component={MultiSelectFieldFF} options={options} label={label} />;\n};\n\nconst {\n  string\n} = PropTypes;\nUnlabeledOptionsField.propTypes = {\n  endpoint: string.isRequired,\n  label: string.isRequired,\n  name: string.isRequired\n};\nexport default UnlabeledOptionsField;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { MultiSelectField, ReactFinalForm, MultiSelectFieldFF } from '@dhis2/ui';\nimport { analyticsTableTypes } from '../../services/server-translations';\nconst {\n  Field\n} = ReactFinalForm;\nconst query = {\n  options: {\n    resource: '/',\n    id:\n    /* istanbul ignore next */\n    ({\n      id\n    }) => id,\n    params: {\n      paging: false\n    }\n  }\n};\n\nconst SkipTableTypesField = ({\n  endpoint,\n  label,\n  name\n}) => {\n  /**\n   * HACK: this is a bit of a hack to allow using the useDataQuery hook with\n   * a dynamic query. Initially we used a custom hook for this but that\n   * replicated all of the internal logic of the useDataQuery hook so this\n   * seems like a better trade-off.\n   */\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      id: endpoint\n    }\n  });\n\n  if (loading) {\n    return <MultiSelectField loading label={label} />;\n  }\n\n  if (error) {\n    /**\n     * We need these values, so throw the error if they\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  if (data.options.length === 0) {\n    return <MultiSelectField disabled helpText={i18n.t('No options available')} label={label} />;\n  }\n\n  const options = data.options.map(option => ({\n    value: option,\n    label: analyticsTableTypes[option] || option\n  }));\n  return <Field name={name} component={MultiSelectFieldFF} options={options} label={label} />;\n};\n\nconst {\n  string\n} = PropTypes;\nSkipTableTypesField.propTypes = {\n  endpoint: string.isRequired,\n  label: string.isRequired,\n  name: string.isRequired\n};\nexport default SkipTableTypesField;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MultiSelectFieldFF, ReactFinalForm, MultiSelectField } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nconst {\n  Field\n} = ReactFinalForm;\nconst query = {\n  options: {\n    resource: '/',\n    id:\n    /* istanbul ignore next */\n    ({\n      id\n    }) => id,\n    params: {\n      paging: false\n    }\n  }\n};\n/**\n * A labeled options field has options that have both a label and a value,\n * as opposed to the unlabeled options field, where the options just have\n * values.\n */\n\nconst LabeledOptionsField = ({\n  endpoint,\n  label,\n  name,\n  parameterName\n}) => {\n  /**\n   * HACK: this is a bit of a hack to allow using the useDataQuery hook with\n   * a dynamic query. Initially we used a custom hook for this but that\n   * replicated all of the internal logic of the useDataQuery hook so this\n   * seems like a better trade-off.\n   */\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      id: endpoint\n    }\n  });\n\n  if (loading) {\n    return <MultiSelectField loading label={label} />;\n  }\n\n  if (error) {\n    /**\n     * We need these values, so throw the error if they\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  if (!(parameterName in data.options) || data.options[parameterName].length === 0) {\n    return <MultiSelectField disabled helpText={i18n.t('No options available')} label={label} />;\n  }\n\n  const options = data.options[parameterName].map(({\n    id,\n    displayName\n  }) => ({\n    value: id,\n    label: displayName\n  }));\n  return <Field name={name} component={MultiSelectFieldFF} options={options} label={label} />;\n};\n\nconst {\n  string\n} = PropTypes;\nLabeledOptionsField.propTypes = {\n  endpoint: string.isRequired,\n  label: string.isRequired,\n  name: string.isRequired,\n  parameterName: string.isRequired\n};\nexport default LabeledOptionsField;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, InputFieldFF, SwitchFieldFF, Box } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { getJobTypeParameters, getParameterEndpoint, getStringValue } from './selectors';\nimport UnlabeledOptionsField from './UnlabeledOptionsField';\nimport SkipTableTypesField from './SkipTableTypesField';\nimport LabeledOptionsField from './LabeledOptionsField';\nimport styles from './ParameterFields.module.css';\nconst {\n  Field\n} = ReactFinalForm; // The key under which the parameters will be sent to the backend\n\nconst FIELD_NAME = 'jobParameters';\nconst query = {\n  jobTypes: {\n    resource: 'jobConfigurations/jobTypes'\n  }\n}; // Renders all parameters for a given jobtype\n\nconst ParameterFields = ({\n  jobType\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error) {\n    /**\n     * We need the parameters, so throw the error if these\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  const parameters = getJobTypeParameters(data.jobTypes.jobTypes, jobType);\n\n  if (parameters.length === 0) {\n    return null;\n  } // Map all parameters to the appropriate field types\n\n\n  const parameterComponents = parameters.map(({\n    fieldName,\n    name,\n    klass,\n    relativeApiEndpoint\n  }) => {\n    const defaultProps = {\n      label: fieldName,\n      name: `${FIELD_NAME}.${name}`\n    };\n    const endpoint = getParameterEndpoint(relativeApiEndpoint);\n    let parameterComponent = null; // Specific case\n\n    if (name === 'skipTableTypes') {\n      return <Box marginTop=\"16px\" key={name}>\n                        <SkipTableTypesField {...defaultProps} endpoint={endpoint} />\n                    </Box>;\n    } // Generic field rendering\n\n\n    switch (klass) {\n      case 'java.lang.String':\n        parameterComponent = <Field {...defaultProps} component={InputFieldFF} type=\"text\" />;\n        break;\n\n      case 'java.lang.Boolean':\n        parameterComponent = <Field {...defaultProps} component={SwitchFieldFF} type=\"checkbox\" />;\n        break;\n\n      case 'java.lang.Integer':\n        parameterComponent = <Field {...defaultProps} component={InputFieldFF} format={getStringValue} type=\"number\" />;\n        break;\n\n      case 'java.util.Set':\n        parameterComponent = <UnlabeledOptionsField {...defaultProps} endpoint={endpoint} />;\n        break;\n\n      case 'java.util.List':\n        parameterComponent = <LabeledOptionsField {...defaultProps} parameterName={name} endpoint={endpoint} />;\n        break;\n    } // Wrap all components in a Box for spacing\n\n\n    return <Box marginTop=\"16px\" key={name}>\n                    {parameterComponent}\n                </Box>;\n  });\n  return <React.Fragment>\n            <header>\n                <h4 className={styles.headerTitle}>{i18n.t('Parameters')}</h4>\n            </header>\n            {parameterComponents}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nParameterFields.propTypes = {\n  jobType: string.isRequired\n};\nexport default ParameterFields;","import React from 'react';\nimport { Box, ReactFinalForm, InputFieldFF } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { requiredCron } from '../../services/validators';\nimport { CronPresetButton } from '../Buttons';\nimport translateCron from '../../services/translate-cron';\nconst {\n  Field,\n  useFormState,\n  useForm\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'cronExpression';\nconst VALIDATOR = requiredCron;\n\nconst CronField = () => {\n  const form = useForm();\n  const {\n    values\n  } = useFormState({\n    subscription: {\n      values: true\n    }\n  });\n  const cronExpression = values[FIELD_NAME];\n  const helpText = translateCron(cronExpression);\n  return <React.Fragment>\n            <Field component={InputFieldFF} name={FIELD_NAME} validate={VALIDATOR} label={i18n.t('CRON Expression')} type=\"text\" helpText={helpText} required />\n            <Box marginTop=\"8px\">\n                <CronPresetButton setCron={\n      /* istanbul ignore next */\n      cron => form.change(FIELD_NAME, cron)} small />\n            </Box>\n        </React.Fragment>;\n};\n\nexport default CronField;","import React from 'react';\nimport { ReactFinalForm, InputFieldFF, composeValidators, hasValue, integer, createNumberRange } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { getStringValue } from './selectors';\nconst {\n  Field\n} = ReactFinalForm; // Omitting the underscore here since it messes up i18n\n\nconst LOWERBOUND = 1;\nconst UPPERBOUND = 86400; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'delay';\nconst VALIDATOR = composeValidators(integer, hasValue, createNumberRange(LOWERBOUND, UPPERBOUND));\n\nconst DelayField = () => <Field component={InputFieldFF} name={FIELD_NAME} validate={VALIDATOR} label={i18n.t('Delay')} type=\"number\" format={getStringValue} helpText={i18n.t('Delay in seconds ({{ LOWERBOUND }} - {{ UPPERBOUND }})', {\n  LOWERBOUND,\n  UPPERBOUND\n})} required />;\n\nexport default DelayField;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { getJobTypeObject } from './selectors';\nimport CronField from './CronField';\nimport DelayField from './DelayField';\nconst query = {\n  jobTypes: {\n    resource: 'jobConfigurations/jobTypes'\n  }\n};\n\nconst ScheduleField = ({\n  jobType\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error) {\n    /**\n     * We need the jobtypes, so throw the error if these\n     * can't be loaded.\n     */\n    throw error;\n  }\n\n  const currentJob = getJobTypeObject(data.jobTypes.jobTypes, jobType);\n  const schedulingType = currentJob.schedulingType;\n\n  switch (schedulingType) {\n    case 'CRON':\n      return <CronField />;\n\n    case 'FIXED_DELAY':\n      return <DelayField />;\n\n    default:\n      // Unrecognised scheduling type\n      return null;\n  }\n};\n\nconst {\n  string\n} = PropTypes;\nScheduleField.propTypes = {\n  jobType: string.isRequired\n};\nexport default ScheduleField;","import JobNameField from './JobNameField';\nimport JobTypeField, { FIELD_NAME as JOB_TYPE } from './JobTypeField';\nimport ParameterFields from './ParameterFields';\nimport ScheduleField from './ScheduleField';\nconst fieldNames = {\n  JOB_TYPE\n};\nexport { JobNameField, ScheduleField, JobTypeField, ParameterFields, fieldNames };","import React, { useEffect } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, CircularLoader, Box, ReactFinalForm } from '@dhis2/ui';\nimport { DiscardFormButton } from '../Buttons';\nimport { FormErrorBox } from '../FormErrorBox';\nimport { ScheduleField, JobNameField, JobTypeField, ParameterFields, fieldNames } from '../FormFields';\nimport styles from './JobAddForm.module.css';\nconst {\n  useForm\n} = ReactFinalForm;\n\nconst JobAddForm = ({\n  handleSubmit,\n  pristine,\n  submitting,\n  submitError,\n  hasSubmitErrors,\n  values,\n  setIsPristine\n}) => {\n  const {\n    subscribe\n  } = useForm();\n  /**\n   * Lift pristine state up on changes, wrapped in useEffect because calls to setState\n   * outside of the component that owns the setState should not happen synchronously.\n   */\n\n  useEffect(() => {\n    subscribe(({\n      pristine\n    }) => setIsPristine(pristine), {\n      pristine: true\n    });\n  }); // Check if there's currently a selected job type\n\n  const jobType = values[fieldNames.JOB_TYPE]; // Show a spinner only when submitting\n\n  const Spinner = submitting ? <CircularLoader small /> : null;\n  return <form onSubmit={handleSubmit}>\n            <Box maxWidth=\"600px\">\n                <JobNameField />\n            </Box>\n            <Box marginTop=\"16px\" maxWidth=\"400px\">\n                <JobTypeField />\n            </Box>\n            {jobType && <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <ScheduleField jobType={jobType} />\n                </Box>}\n            {jobType && <Box marginTop=\"32px\" maxWidth=\"400px\">\n                    <ParameterFields jobType={jobType} />\n                </Box>}\n            {hasSubmitErrors && <Box marginTop=\"32px\" maxWidth=\"600px\">\n                    <FormErrorBox submitError={submitError} />\n                </Box>}\n            <div className={styles.formButtonContainer}>\n                <Button primary type=\"submit\" disabled={pristine || submitting} icon={Spinner} className={styles.saveButton}>\n                    {i18n.t('Save')}\n                </Button>\n                <DiscardFormButton shouldConfirm={!pristine}>\n                    {i18n.t('Cancel')}\n                </DiscardFormButton>\n            </div>\n        </form>;\n};\n\nconst {\n  func,\n  bool,\n  object,\n  array\n} = PropTypes;\nJobAddForm.defaultProps = {\n  submitError: []\n};\nJobAddForm.propTypes = {\n  handleSubmit: func.isRequired,\n  hasSubmitErrors: bool.isRequired,\n  pristine: bool.isRequired,\n  setIsPristine: func.isRequired,\n  submitting: bool.isRequired,\n  values: object.isRequired,\n  submitError: array\n};\nexport default JobAddForm;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm } from '@dhis2/ui';\nimport { useSubmitJob } from '../../hooks/jobs';\nimport JobAddForm from './JobAddForm';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst JobAddFormContainer = ({\n  setIsPristine\n}) => {\n  const [submitJob] = useSubmitJob();\n  /**\n   * destroyOnUnregister is enabled so that dynamic fields will be unregistered\n   * when they're removed from the form, for instance when the jobType changes.\n   */\n\n  return <Form onSubmit={submitJob} component={JobAddForm} setIsPristine={setIsPristine} destroyOnUnregister />;\n};\n\nconst {\n  func\n} = PropTypes;\nJobAddFormContainer.propTypes = {\n  setIsPristine: func.isRequired\n};\nexport default JobAddFormContainer;","import React, { useEffect } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, CircularLoader, Box, ReactFinalForm } from '@dhis2/ui';\nimport history from '../../services/history';\nimport { DiscardFormButton, DeleteJobButton } from '../Buttons';\nimport { FormErrorBox } from '../FormErrorBox';\nimport { ScheduleField, JobNameField, JobTypeField, ParameterFields, fieldNames } from '../FormFields';\nimport styles from './JobEditForm.module.css';\nconst {\n  useForm\n} = ReactFinalForm;\n\nconst JobEditForm = ({\n  id,\n  handleSubmit,\n  pristine,\n  submitting,\n  submitError,\n  hasSubmitErrors,\n  values,\n  setIsPristine\n}) => {\n  const {\n    subscribe\n  } = useForm();\n  /**\n   * Lift pristine state up on changes, wrapped in useEffect because calls to setState\n   * outside of the component that owns the setState should not happen synchronously.\n   */\n\n  useEffect(() => {\n    subscribe(({\n      pristine\n    }) => setIsPristine(pristine), {\n      pristine: true\n    });\n  }); // Check if there's currently a selected job type\n\n  const jobType = values[fieldNames.JOB_TYPE]; // Show a spinner only when submitting\n\n  const Spinner = submitting ? <CircularLoader small /> : null;\n  return <form onSubmit={handleSubmit}>\n            <Box maxWidth=\"600px\">\n                <JobNameField />\n            </Box>\n            <Box marginTop=\"16px\" maxWidth=\"400px\">\n                <JobTypeField />\n            </Box>\n            {jobType && <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <ScheduleField jobType={jobType} />\n                </Box>}\n            {jobType && <Box marginTop=\"32px\" maxWidth=\"400px\">\n                    <ParameterFields jobType={jobType} />\n                </Box>}\n            {hasSubmitErrors && <Box marginTop=\"32px\" maxWidth=\"600px\">\n                    <FormErrorBox submitError={submitError} />\n                </Box>}\n            <div className={styles.formButtonContainer}>\n                <Button primary type=\"submit\" disabled={pristine || submitting} icon={Spinner} className={styles.saveButton}>\n                    {i18n.t('Save')}\n                </Button>\n                <DiscardFormButton shouldConfirm={!pristine}>\n                    {i18n.t('Cancel')}\n                </DiscardFormButton>\n                <span className={styles.deleteButton}>\n                    <DeleteJobButton id={id} onSuccess={() => history.push('/')} />\n                </span>\n            </div>\n        </form>;\n};\n\nconst {\n  func,\n  bool,\n  object,\n  array,\n  string\n} = PropTypes;\nJobEditForm.defaultProps = {\n  submitError: []\n};\nJobEditForm.propTypes = {\n  handleSubmit: func.isRequired,\n  hasSubmitErrors: bool.isRequired,\n  id: string.isRequired,\n  pristine: bool.isRequired,\n  setIsPristine: func.isRequired,\n  submitting: bool.isRequired,\n  values: object.isRequired,\n  submitError: array\n};\nexport default JobEditForm;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm } from '@dhis2/ui';\nimport { useParams } from 'react-router-dom';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { useUpdateJob } from '../../hooks/jobs';\nimport JobEditForm from './JobEditForm';\nconst {\n  Form\n} = ReactFinalForm;\n/**\n * The fields we need for the initialValues for our form fields. Since we use\n * these values to set the initial values in final-form, if we wouldn't filter\n * them we'd end up submitting way more data than we intend to.\n */\n\nconst whitelistedFields = ['cronExpression', 'delay', 'jobParameters', 'jobType', 'name', 'schedulingType'];\nconst query = {\n  job: {\n    resource: 'jobConfigurations',\n    id:\n    /* istanbul ignore next */\n    ({\n      id\n    }) => id,\n    params: {\n      paging: false,\n      fields: whitelistedFields.join(',')\n    }\n  }\n};\n\nconst JobEditFormContainer = ({\n  setIsPristine\n}) => {\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      id\n    }\n  });\n  const [updateJob] = useUpdateJob({\n    id\n  });\n\n  if (loading) {\n    return null;\n  }\n  /* istanbul ignore next: we're testing this section, but coverage reporting seems to disagree */\n\n\n  if (error) {\n    /**\n     * We need the data, so throw the error if it\n     * can't be loaded.\n     */\n    throw error;\n  }\n  /**\n   * destroyOnUnregister is enabled so that dynamic fields will be unregistered\n   * when they're removed from the form, for instance when the jobType changes.\n   */\n\n  /* istanbul ignore next: we're testing this section, but coverage reporting seems to disagree */\n\n\n  return <Form onSubmit={updateJob} component={JobEditForm} setIsPristine={setIsPristine} initialValues={data.job} id={id} destroyOnUnregister />;\n};\n\nconst {\n  func\n} = PropTypes;\nJobEditFormContainer.propTypes = {\n  setIsPristine: func.isRequired\n};\nexport default JobEditFormContainer;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport { jobStatusMap } from '../../services/server-translations';\nimport styles from './JobDetails.module.css';\n\nconst JobDetails = ({\n  created,\n  lastExecutedStatus,\n  lastExecuted\n}) => {\n  // Using Date.now allows for easier mocking\n  const now = Date.now();\n  const createdFromNow = moment(created).from(now);\n  const translatedStatus = jobStatusMap[lastExecutedStatus];\n  const lastRunFromNow = lastExecuted ? moment(lastExecuted).from(now) : '';\n  return <div className={styles.wrapper}>\n            <h4 className={styles.title}>{i18n.t('Job details')}</h4>\n            <div className={styles.details}>\n                <div>\n                    {i18n.t('Created {{ createdFromNow }}.', {\n          createdFromNow\n        })}\n                </div>\n                {lastRunFromNow && <div>\n                        {i18n.t('Last run {{ lastRunFromNow }}.', {\n          lastRunFromNow\n        })}\n                    </div>}\n                {translatedStatus && <div>\n                        {i18n.t('Last run status: {{ translatedStatus }}.', {\n          translatedStatus,\n          nsSeparator: '>'\n        })}\n                    </div>}\n            </div>\n        </div>;\n};\n\nconst {\n  string\n} = PropTypes;\nJobDetails.propTypes = {\n  created: string.isRequired,\n  lastExecuted: string.isRequired,\n  lastExecutedStatus: string.isRequired\n};\nexport default JobDetails;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DiscardFormButton } from '../../components/Buttons';\nimport { JobEditFormContainer } from '../../components/Forms';\nimport { JobDetails } from '../../components/JobDetails';\nimport styles from './JobEdit.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobEdit = ({\n  isPristine,\n  setIsPristine,\n  name,\n  created,\n  lastExecutedStatus,\n  lastExecuted\n}) => <React.Fragment>\n        <header className={styles.pageHeader}>\n            <DiscardFormButton shouldConfirm={!isPristine} className={styles.pageHeaderButton} small>\n                {i18n.t('Back to all jobs')}\n            </DiscardFormButton>\n            <h2 className={styles.pageHeaderTitle}>\n                {i18n.t('Job: {{ name }}', {\n        name,\n        nsSeparator: '>'\n      })}\n            </h2>\n        </header>\n        <Card className={styles.card}>\n            <header className={styles.cardHeader}>\n                <h3 className={styles.cardHeaderTitle}>\n                    {i18n.t('Configuration')}\n                </h3>\n                <a href={infoLink} className={styles.cardHeaderLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.cardHeaderInfo}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <JobDetails created={created} lastExecutedStatus={lastExecutedStatus} lastExecuted={lastExecuted} />\n            <JobEditFormContainer setIsPristine={setIsPristine} />\n        </Card>\n    </React.Fragment>;\n\nconst {\n  bool,\n  func,\n  string\n} = PropTypes;\nJobEdit.propTypes = {\n  created: string.isRequired,\n  isPristine: bool.isRequired,\n  lastExecuted: string.isRequired,\n  lastExecutedStatus: string.isRequired,\n  name: string.isRequired,\n  setIsPristine: func.isRequired\n};\nexport default JobEdit;","import React, { useState } from 'react';\nimport { CircularLoader, Layer, CenteredContent } from '@dhis2/ui';\nimport { useParams } from 'react-router-dom';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport JobEdit from './JobEdit';\nconst query = {\n  job: {\n    resource: 'jobConfigurations',\n    id:\n    /* istanbul ignore next */\n    ({\n      id\n    }) => id,\n    params: {\n      paging: false\n    }\n  }\n};\n\nconst JobEditContainer = () => {\n  const [isPristine, setIsPristine] = useState(true);\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      id\n    }\n  });\n\n  if (loading) {\n    return <Layer>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  if (error) {\n    /**\n     * The app can't continue if this fails, because it doesn't\n     * have the job data, so throw the error.\n     */\n    throw error;\n  }\n\n  return <JobEdit isPristine={isPristine} setIsPristine={setIsPristine} name={data.job.name} created={data.job.created} lastExecutedStatus={data.job.lastExecutedStatus} lastExecuted={data.job.lastExecuted} />;\n};\n\nexport default JobEditContainer;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DiscardFormButton } from '../../components/Buttons';\nimport { JobAddFormContainer } from '../../components/Forms';\nimport styles from './JobAdd.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobAdd = ({\n  isPristine,\n  setIsPristine\n}) => <React.Fragment>\n        <header className={styles.pageHeader}>\n            <DiscardFormButton shouldConfirm={!isPristine} className={styles.pageHeaderButton} small>\n                {i18n.t('Back to all jobs')}\n            </DiscardFormButton>\n            <h2 className={styles.pageHeaderTitle}>{i18n.t('New Job')}</h2>\n        </header>\n        <Card className={styles.card}>\n            <header className={styles.cardHeader}>\n                <h3 className={styles.cardHeaderTitle}>\n                    {i18n.t('Configuration')}\n                </h3>\n                <a href={infoLink} className={styles.cardHeaderLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.cardHeaderInfo}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <JobAddFormContainer setIsPristine={setIsPristine} />\n        </Card>\n    </React.Fragment>;\n\nconst {\n  bool,\n  func\n} = PropTypes;\nJobAdd.propTypes = {\n  isPristine: bool.isRequired,\n  setIsPristine: func.isRequired\n};\nexport default JobAdd;","import React, { useState } from 'react';\nimport JobAdd from './JobAdd';\n\nconst JobAddContainer = () => {\n  const [isPristine, setIsPristine] = useState(true);\n  return <JobAdd isPristine={isPristine} setIsPristine={setIsPristine} />;\n};\n\nexport default JobAddContainer;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\n\nconst NotAuthorized = () => <div>{i18n.t('You are not authorized')}</div>;\n\nexport default NotAuthorized;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Router } from 'react-router';\nimport { AuthWall } from '../AuthWall';\nimport { JobListContainer } from '../../pages/JobList';\nimport { JobEditContainer } from '../../pages/JobEdit';\nimport { JobAddContainer } from '../../pages/JobAdd';\nimport { NotAuthorized } from '../../pages/NotAuthorized';\nimport history from '../../services/history';\n\nconst Routes = () => <Router history={history}>\n        <AuthWall>\n            <Route exact path=\"/\" component={JobListContainer} />\n            <Route path=\"/edit/:id\" component={JobEditContainer} />\n            <Route path=\"/add\" component={JobAddContainer} />\n        </AuthWall>\n        <Route path=\"/notauthorized\" component={NotAuthorized} />\n    </Router>;\n\nexport default Routes;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport styles from './PageWrapper.module.css';\n\nconst PageWrapper = ({\n  children\n}) => <div className={styles.wrapper}>{children}</div>;\n\nconst {\n  node\n} = PropTypes;\nPageWrapper.propTypes = {\n  children: node.isRequired\n};\nexport default PageWrapper;","import React from 'react';\nimport { CssVariables } from '@dhis2/ui';\nimport { Routes } from '../Routes';\nimport { PageWrapper } from '../PageWrapper';\nimport './App.css';\n\nconst App = () => <React.Fragment>\n        <CssVariables spacers colors />\n        <PageWrapper>\n            <Routes />\n        </PageWrapper>\n    </React.Fragment>;\n\nexport default App;","export { default } from './App';"],"sourceRoot":""}