{"version":3,"sources":["D2App/pages/JobList/JobList.module.css","D2App/components/FormErrorBox/FormErrorBox.module.css","D2App/components/FormFields/ParameterFields.module.css","D2App/components/Forms/JobAddForm.module.css","D2App/components/Forms/JobEditForm.module.css","D2App/components/JobDetails/JobDetails.module.css","D2App/pages/JobEdit/JobEdit.module.css","D2App/pages/JobView/JobView.module.css","D2App/pages/JobAdd/JobAdd.module.css","D2App/components/AuthWall/AuthWall.module.css","D2App/components/PageWrapper/PageWrapper.module.css","D2App/components/Store/StoreContext.js","D2App/components/Store/Store.js","D2App/components/Store/hooks.js","D2App/services/history/history.js","D2App/services/history/index.js","D2App/services/server-translations/analyticsTableTypes.js","D2App/services/server-translations/jobTypesMap.js","D2App/services/server-translations/jobStatusMap.js","D2App/components/Switches/ToggleJobSwitch.js","D2App/components/JobTable/EditJobAction.js","D2App/components/JobTable/ViewJobAction.js","D2App/components/Modal/CronPresetModal.js","D2App/components/Modal/DeleteJobModal.js","D2App/components/Modal/DiscardFormModal.js","D2App/components/Modal/RunJobModal.js","D2App/components/JobTable/RunJobAction.js","D2App/components/JobTable/DeleteJobAction.js","D2App/components/JobTable/Actions.js","D2App/components/JobTable/Status.js","D2App/components/JobTable/NextRun.js","D2App/services/validators/validate-cron.js","D2App/services/validators/required-cron.js","D2App/services/translate-cron/translate-cron.js","D2App/services/translate-cron/index.js","D2App/components/JobTable/Schedule.js","D2App/components/JobTable/JobTableRow.js","D2App/components/JobTable/JobTable.js","D2App/pages/JobList/JobList.js","D2App/pages/JobList/JobListContainer.js","D2App/components/Buttons/CronPresetButton.js","D2App/components/Buttons/DeleteJobButton.js","D2App/components/Buttons/DiscardFormButton.js","D2App/services/format-error/format-error.js","D2App/services/format-error/index.js","D2App/hooks/jobs/use-submit-job.js","D2App/hooks/jobs/use-update-job.js","D2App/components/FormErrorBox/FormErrorBox.js","D2App/components/FormFields/JobNameField.js","D2App/components/FormFields/JobTypeField.js","D2App/components/FormFields/formatters.js","D2App/components/FormFields/SkipTableTypesField.js","D2App/components/FormFields/LabeledOptionsField.js","D2App/components/FormFields/ParameterFields.js","D2App/components/FormFields/CronField.js","D2App/components/FormFields/DelayField.js","D2App/components/FormFields/ScheduleField.js","D2App/components/FormFields/index.js","D2App/components/Forms/JobAddForm.js","D2App/components/Forms/JobAddFormContainer.js","D2App/components/Forms/JobEditForm.js","D2App/components/Forms/JobEditFormContainer.js","D2App/components/JobDetails/JobDetails.js","D2App/pages/JobEdit/JobEdit.js","D2App/pages/JobEdit/JobEditContainer.js","D2App/pages/JobView/JobView.js","D2App/pages/JobAdd/JobAdd.js","D2App/pages/JobAdd/JobAddContainer.js","D2App/components/Routes/Routes.js","D2App/components/AuthWall/AuthWall.js","D2App/components/AuthWall/selectors.js","D2App/components/PageWrapper/PageWrapper.js","D2App/components/App/App.js","D2App/components/App/index.js"],"names":["module","exports","StoreContext","createContext","jobs","jobTypes","parameterOptions","refetchJobs","Error","jobsQuery","resource","params","fields","paging","jobTypesQuery","optionsQuery","skipTableTypes","validationRuleGroups","pushAnalysis","predictors","predictorGroups","node","PropTypes","Store","children","jobFilterState","useState","showSystemJobsState","jobsFetch","useDataQuery","jobTypesFetch","optionsFetch","loading","error","jobConfigurations","data","Provider","value","refetch","jobFilter","showSystemJobs","useAllJobs","useContext","useAllParameterOptions","useAllJobTypes","useRefetchJobs","useJobFilter","useShowSystemJobs","useJobListJobs","filter","job","name","toLowerCase","includes","configurable","useJob","id","find","useJobType","jobType","useJobTypeParameters","selectedJobType","jobParameters","useParameterOptions","parameter","history","createHashHistory","analyticsTableTypes","DATA_VALUE","i18n","t","COMPLETENESS","COMPLETENESS_TARGET","ORG_UNIT_TARGET","EVENT","ENROLLMENT","VALIDATION_RESULT","jobTypesMap","ANALYTICS_TABLE","CONTINUOUS_ANALYTICS_TABLE","CREDENTIALS_EXPIRY_ALERT","DATA_INTEGRITY","DATA_SET_NOTIFICATION","DATA_STATISTICS","DATA_SYNC","EVENT_PROGRAMS_DATA_SYNC","FILE_RESOURCE_CLEANUP","META_DATA_SYNC","MONITORING","PREDICTOR","PROGRAM_NOTIFICATIONS","PUSH_ANALYSIS","REMOVE_EXPIRED_RESERVED_VALUES","RESOURCE_TABLE","SEND_SCHEDULED_MESSAGE","TRACKER_PROGRAMS_DATA_SYNC","VALIDATION_RESULTS_NOTIFICATION","jobStatusMap","COMPLETED","DISABLED","DONE","FAILED","NOT_STARTED","RUNNING","SCHEDULED","STOPPED","mutation","type","partial","enabled","bool","string","ToggleJobSwitch","checked","disabled","toggleJob","useDataMutation","hooks","onChange","then","EditJobAction","dense","onClick","push","label","ViewJobAction","cronPresets","func","CronPresetModal","setCron","hideModal","currentPreset","setCurrentPreset","open","small","onClose","map","preset","key","end","secondary","primary","DeleteJobModal","onSuccess","deleteJob","destructive","DiscardFormModal","RunJobModal","engine","useDataEngine","query","RunJobAction","showModal","setShowModal","Fragment","DeleteJobAction","Actions","component","defaultProps","Status","status","neutral","negative","positive","NextRun","nextExecutionTime","now","moment","Date","nextRun","utc","isSameOrBefore","to","propTypes","isRequired","WEEKDAYS","MONTHS","isValidNumber","number","x","y","isWildcard","field","isUndefined","isValidWithinRange","range","boundaries","split","length","isValidNumberRange","fraction","components","isValidFraction","isValidMonthField","months","firstMonth","secondMonth","m","indexOf","undefined","isAlphabeticMonth","isValidWeekdayField","weekdays","firstDay","secondDay","c","isAlphabeticWeekday","validateCron","exp","trim","isValidFields","isValidMinuteField","isValidHourField","isValidDayField","requiredCron","translateCron","cron","locale","language","cronstrue","toString","Schedule","cronExpression","schedulingType","delay","shape","JobTableRow","displayName","jobStatus","object","arrayOf","JobTable","JobList","setShowSystemJobs","setJobFilter","className","styles","header","headerTitle","href","headerLink","target","rel","headerLinkIcon","controlContainer","dataTest","placeholder","controlRight","JobListContainer","CronPresetButton","DeleteJobButton","DiscardFormButton","shouldConfirm","FORM_ERROR","FinalForm","formatError","details","response","validationErrors","genericErrors","errorReports","forEach","report","errorProperty","message","useSubmitJob","mutate","variables","catch","useUpdateJob","array","FormErrorBox","submitError","title","list","Field","ReactFinalForm","VALIDATOR","composeValidators","hasValue","JobNameField","InputFieldFF","validate","required","JobTypeField","options","SingleSelectFieldFF","formatToString","SkipTableTypesField","parameterName","helpText","translatedOptions","option","MultiSelectFieldFF","LabeledOptionsField","labeledOptions","ParameterFields","parameters","parameterComponents","fieldName","klass","parameterComponent","marginTop","SwitchFieldFF","format","useFormState","useForm","CronField","form","values","subscription","change","integer","createNumberRange","DelayField","lowerbound","upperbound","ScheduleField","fieldNames","JobAddForm","handleSubmit","pristine","submitting","hasSubmitErrors","setIsPristine","subscribe","useEffect","Spinner","onSubmit","maxWidth","formButtonContainer","icon","saveButton","Form","JobAddFormContainer","submitJob","destroyOnUnregister","JobEditForm","deleteButton","initialFields","JobEditFormContainer","useParams","updateJob","initialValues","reduce","filtered","JobDetails","created","lastExecutedStatus","lastExecuted","createdFromNow","from","translatedStatus","lastRunFromNow","wrapper","nsSeparator","JobEdit","isPristine","pageHeader","pageHeaderButton","pageHeaderTitle","card","cardHeader","cardHeaderTitle","cardHeaderLink","cardHeaderInfo","jobDetails","JobEditContainer","JobView","selected","JobAdd","JobAddContainer","Routes","exact","path","me","AuthWall","authorities","getAuthorized","noticeBoxWrapper","PageWrapper","App","spacers","colors"],"mappings":"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","file":"static/js/app.0a2e1746.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"JobList_header__23tFt\",\"headerTitle\":\"JobList_headerTitle__21D__\",\"headerLink\":\"JobList_headerLink__2zepi\",\"headerLinkIcon\":\"JobList_headerLinkIcon__XdfBB\",\"controlContainer\":\"JobList_controlContainer__3Yzj_\",\"controlRight\":\"JobList_controlRight__38lfB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FormErrorBox_list__3BejY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerTitle\":\"ParameterFields_headerTitle__IBF76\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButtonContainer\":\"JobAddForm_formButtonContainer__1MLSp\",\"saveButton\":\"JobAddForm_saveButton__RfxZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButtonContainer\":\"JobEditForm_formButtonContainer__2b6Fi\",\"deleteButton\":\"JobEditForm_deleteButton__VQxBE\",\"saveButton\":\"JobEditForm_saveButton__278Ab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"JobDetails_wrapper__1-YkO\",\"title\":\"JobDetails_title__1Cht7\",\"details\":\"JobDetails_details__2HITJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"JobEdit_pageHeader__3Fywp\",\"pageHeaderButton\":\"JobEdit_pageHeaderButton__29yjJ\",\"pageHeaderTitle\":\"JobEdit_pageHeaderTitle__jZrIG\",\"card\":\"JobEdit_card__2QqEg\",\"cardHeader\":\"JobEdit_cardHeader__Mv_cj\",\"cardHeaderTitle\":\"JobEdit_cardHeaderTitle__29Y64\",\"cardHeaderInfo\":\"JobEdit_cardHeaderInfo__3VWZt\",\"cardHeaderLink\":\"JobEdit_cardHeaderLink__2frj7\",\"jobDetails\":\"JobEdit_jobDetails__194v-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"JobView_pageHeader__3d3IR\",\"pageHeaderButton\":\"JobView_pageHeaderButton__2VF9Z\",\"pageHeaderTitle\":\"JobView_pageHeaderTitle__3wHyg\",\"card\":\"JobView_card__3LlD0\",\"cardHeader\":\"JobView_cardHeader__3v0pX\",\"cardHeaderTitle\":\"JobView_cardHeaderTitle__tPEnV\",\"cardHeaderInfo\":\"JobView_cardHeaderInfo__j1GsD\",\"cardHeaderLink\":\"JobView_cardHeaderLink__86M36\",\"jobDetails\":\"JobView_jobDetails__3cu4z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeader\":\"JobAdd_pageHeader__2NZzc\",\"pageHeaderButton\":\"JobAdd_pageHeaderButton__Xg_R9\",\"pageHeaderTitle\":\"JobAdd_pageHeaderTitle__1RMl0\",\"card\":\"JobAdd_card__1HH6H\",\"cardHeader\":\"JobAdd_cardHeader__1D3sS\",\"cardHeaderTitle\":\"JobAdd_cardHeaderTitle__2TG9a\",\"cardHeaderInfo\":\"JobAdd_cardHeaderInfo__vq_Y1\",\"cardHeaderLink\":\"JobAdd_cardHeaderLink__2CzPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noticeBoxWrapper\":\"AuthWall_noticeBoxWrapper__1ums5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PageWrapper_wrapper__t-CJy\"};","import { createContext } from 'react';\nconst StoreContext = createContext({\n  jobs: {},\n  jobTypes: {},\n  parameterOptions: {},\n  refetchJobs: () => {\n    throw new Error('Store context needs a valid provider');\n  }\n});\nexport default StoreContext;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { CircularLoader, Layer, CenteredContent } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport StoreContext from './StoreContext';\nconst jobsQuery = {\n  jobs: {\n    resource: 'jobConfigurations',\n    params: {\n      fields: '*',\n      paging: false\n    }\n  }\n};\nconst jobTypesQuery = {\n  jobTypes: {\n    resource: 'jobConfigurations/jobTypes',\n    params: {\n      fields: '*',\n      paging: false\n    }\n  }\n};\nconst optionsQuery = {\n  // Used by the ANALYTICS_TABLE and CONTINUOUS_ANALYTICS_TABLE job types\n  skipTableTypes: {\n    resource: 'analytics/tableTypes'\n  },\n  // Used by the MONITORING job type\n  validationRuleGroups: {\n    resource: 'validationRuleGroups',\n    params: {\n      paging: false\n    }\n  },\n  // Used by the PUSH_ANALYSIS job type\n  pushAnalysis: {\n    resource: 'pushAnalysis',\n    params: {\n      paging: false\n    }\n  },\n  // Used by the PREDICTOR job type\n  predictors: {\n    resource: 'predictors',\n    params: {\n      paging: false\n    }\n  },\n  predictorGroups: {\n    resource: 'predictorGroups',\n    params: {\n      paging: false\n    }\n  }\n};\n\nconst Store = ({\n  children\n}) => {\n  // State that should persist after a refetch\n  const jobFilterState = useState('');\n  const showSystemJobsState = useState(false);\n  const jobsFetch = useDataQuery(jobsQuery);\n  const jobTypesFetch = useDataQuery(jobTypesQuery);\n  const optionsFetch = useDataQuery(optionsQuery);\n  const loading = jobsFetch.loading || jobTypesFetch.loading || optionsFetch.loading;\n\n  if (loading) {\n    return <Layer>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  const error = jobsFetch.error || jobTypesFetch.error || optionsFetch.error;\n\n  if (error) {\n    /**\n     * The app can't continue if this fails, because it doesn't\n     * have any data, so throw the error.\n     */\n    throw error;\n  }\n\n  const {\n    jobConfigurations: jobs\n  } = jobsFetch.data.jobs;\n  const {\n    jobTypes\n  } = jobTypesFetch.data.jobTypes;\n  const {\n    skipTableTypes,\n    validationRuleGroups: {\n      validationRuleGroups\n    },\n    pushAnalysis: {\n      pushAnalysis\n    },\n    predictors: {\n      predictors\n    },\n    predictorGroups: {\n      predictorGroups\n    }\n  } = optionsFetch.data;\n  const parameterOptions = {\n    skipTableTypes,\n    validationRuleGroups,\n    pushAnalysis,\n    predictors,\n    predictorGroups\n  };\n  return <StoreContext.Provider value={{\n    jobs,\n    jobTypes,\n    parameterOptions,\n    refetchJobs: jobsFetch.refetch,\n    jobFilter: jobFilterState,\n    showSystemJobs: showSystemJobsState\n  }}>\n            {children}\n        </StoreContext.Provider>;\n};\n\nconst {\n  node\n} = PropTypes;\nStore.propTypes = {\n  children: node.isRequired\n};\nexport default Store;","import { useContext } from 'react';\nimport StoreContext from './StoreContext';\nexport const useAllJobs = () => {\n  const store = useContext(StoreContext);\n  return store.jobs;\n};\nexport const useAllParameterOptions = () => {\n  const store = useContext(StoreContext);\n  return store.parameterOptions;\n};\nexport const useAllJobTypes = () => {\n  const store = useContext(StoreContext);\n  return store.jobTypes;\n};\nexport const useRefetchJobs = () => {\n  const store = useContext(StoreContext);\n  return store.refetchJobs;\n};\n/**\n * The state for the job filter and showing system\n * jobs is used in the job list, but kept in the\n * store since it has to persist after a refetch.\n */\n\nexport const useJobFilter = () => {\n  const store = useContext(StoreContext);\n  return store.jobFilter;\n};\nexport const useShowSystemJobs = () => {\n  const store = useContext(StoreContext);\n  return store.showSystemJobs;\n};\n/**\n * This hook returns the list of jobs that's shown in the\n * job list route. The list is filtered by the job filter\n * string and the show system jobs toggle from the store\n * state.\n */\n\nexport const useJobListJobs = () => {\n  const [jobFilter] = useJobFilter();\n  const [showSystemJobs] = useShowSystemJobs();\n  const jobs = useAllJobs(); // Filter jobs by the current jobFilter\n\n  const applyJobFilter = job => job.name.toLowerCase().includes(jobFilter.toLowerCase()); // Filter jobs depending on the current showSystemJobs\n\n\n  const applyShowSystemJobs = job => // Jobs that are configurable are user jobs\n  showSystemJobs ? true : job.configurable;\n\n  return jobs.filter(applyJobFilter).filter(applyShowSystemJobs);\n}; // Finds a job by id\n\nexport const useJob = id => {\n  const jobs = useAllJobs();\n  return jobs.find(job => job.id === id);\n}; // Finds a jobType by the jobType string\n\nexport const useJobType = jobType => {\n  const jobTypes = useAllJobTypes();\n  return jobTypes.find(job => job.jobType === jobType);\n}; // Returns an array with all parameters for a certain jobType\n\nexport const useJobTypeParameters = jobType => {\n  const selectedJobType = useJobType(jobType);\n  const hasParameters = 'jobParameters' in selectedJobType;\n\n  if (!hasParameters) {\n    return [];\n  }\n\n  return selectedJobType.jobParameters;\n}; // Returns the parameter options for a given parameter\n\nexport const useParameterOptions = parameter => {\n  const parameterOptions = useAllParameterOptions();\n  return parameterOptions[parameter];\n};","import { createHashHistory } from 'history';\nconst history = createHashHistory();\nexport default history;","import history from './history';\nexport default history;","import i18n from '@dhis2/d2-i18n';\nconst analyticsTableTypes = {\n  DATA_VALUE: i18n.t('Data value'),\n  COMPLETENESS: i18n.t('Completeness'),\n  COMPLETENESS_TARGET: i18n.t('Completeness target'),\n  ORG_UNIT_TARGET: i18n.t('Org unit target'),\n  EVENT: i18n.t('Event'),\n  ENROLLMENT: i18n.t('Enrollment'),\n  VALIDATION_RESULT: i18n.t('Validation result')\n};\nexport default analyticsTableTypes;","import i18n from '@dhis2/d2-i18n';\nconst jobTypesMap = {\n  ANALYTICS_TABLE: i18n.t('Analytics table'),\n  CONTINUOUS_ANALYTICS_TABLE: i18n.t('Continuous analytics table'),\n  CREDENTIALS_EXPIRY_ALERT: i18n.t('Credentials expiry alert'),\n  DATA_INTEGRITY: i18n.t('Data integrity'),\n  DATA_SET_NOTIFICATION: i18n.t('Dataset notification'),\n  DATA_STATISTICS: i18n.t('Data statistics'),\n  DATA_SYNC: i18n.t('Data synchronization'),\n  EVENT_PROGRAMS_DATA_SYNC: i18n.t('Event programs data sync'),\n  FILE_RESOURCE_CLEANUP: i18n.t('File resource clean up'),\n  META_DATA_SYNC: i18n.t('Metadata synchronization'),\n  MONITORING: i18n.t('Monitoring'),\n  PREDICTOR: i18n.t('Predictor'),\n  PROGRAM_NOTIFICATIONS: i18n.t('Program notifications'),\n  PUSH_ANALYSIS: i18n.t('Push analysis'),\n  REMOVE_EXPIRED_RESERVED_VALUES: i18n.t('Remove expired reserved values'),\n  RESOURCE_TABLE: i18n.t('Resource table'),\n  SEND_SCHEDULED_MESSAGE: i18n.t('Send scheduled message'),\n  TRACKER_PROGRAMS_DATA_SYNC: i18n.t('Tracker programs data sync'),\n  VALIDATION_RESULTS_NOTIFICATION: i18n.t('Validation results notification')\n};\nexport default jobTypesMap;","import i18n from '@dhis2/d2-i18n';\nconst jobStatusMap = {\n  COMPLETED: i18n.t('Completed'),\n  DISABLED: i18n.t('Disabled'),\n  DONE: i18n.t('Done'),\n  FAILED: i18n.t('Failed'),\n  NOT_STARTED: i18n.t('Not started'),\n  RUNNING: i18n.t('Running'),\n  SCHEDULED: i18n.t('Scheduled'),\n  STOPPED: i18n.t('Stopped')\n};\nexport default jobStatusMap;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Switch } from '@dhis2/ui';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport { hooks } from '../Store';\n/* istanbul ignore next */\n\nconst mutation = {\n  resource: 'jobConfigurations',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  partial: true,\n  data: ({\n    enabled\n  }) => ({\n    enabled\n  })\n};\n\nconst ToggleJobSwitch = ({\n  id,\n  checked,\n  disabled\n}) => {\n  const [toggleJob, {\n    loading\n  }] = useDataMutation(mutation);\n  const refetchJobs = hooks.useRefetchJobs();\n  const enabled = !checked;\n  return <Switch name={`toggle-job-${id}`} disabled={disabled || loading} checked={checked} onChange={() => {\n    toggleJob({\n      id,\n      enabled\n    }).then(() => refetchJobs());\n  }} />;\n};\n\nconst {\n  bool,\n  string\n} = PropTypes;\nToggleJobSwitch.propTypes = {\n  checked: bool.isRequired,\n  disabled: bool.isRequired,\n  id: string.isRequired\n};\nexport default ToggleJobSwitch;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\n\nconst EditJobAction = ({\n  id\n}) => <MenuItem dense onClick={() => history.push(`/edit/${id}`)} label={i18n.t('Edit')} />;\n\nconst {\n  string\n} = PropTypes;\nEditJobAction.propTypes = {\n  id: string.isRequired\n};\nexport default EditJobAction;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\n\nconst ViewJobAction = ({\n  id\n}) => <MenuItem dense onClick={() => history.push(`/view/${id}`)} label={i18n.t('View')} />;\n\nconst {\n  string\n} = PropTypes;\nViewJobAction.propTypes = {\n  id: string.isRequired\n};\nexport default ViewJobAction;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalTitle, ModalContent, ModalActions, ButtonStrip, Radio } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nconst cronPresets = [{\n  label: i18n.t('Every hour'),\n  value: '0 0 * ? * *'\n}, {\n  label: i18n.t('Every day at midnight'),\n  value: '0 0 1 ? * *'\n}, {\n  label: i18n.t('Every day at 3 am'),\n  value: '0 0 3 ? * *'\n}, {\n  label: i18n.t('Every day at noon'),\n  value: '0 0 12 ? * MON-FRI'\n}, {\n  label: i18n.t('Every week'),\n  value: '0 0 3 ? * MON'\n}];\n\nconst CronPresetModal = ({\n  setCron,\n  hideModal\n}) => {\n  const [currentPreset, setCurrentPreset] = useState('');\n  return <Modal open small onClose={hideModal}>\n            <ModalTitle>{i18n.t('Choose a preset time/interval')}</ModalTitle>\n            <ModalContent>\n                {cronPresets.map(preset => <Radio {...preset} checked={currentPreset === preset.value} key={preset.value} onChange={({\n        value\n      }) => setCurrentPreset(value)} />)}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button secondary onClick={hideModal} name=\"hide-modal\">\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button primary name=\"insert-preset\" disabled={!currentPreset} onClick={() => {\n          hideModal();\n          setCron(currentPreset);\n        }}>\n                        {i18n.t('Insert preset')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func\n} = PropTypes;\nCronPresetModal.propTypes = {\n  hideModal: func.isRequired,\n  setCron: func.isRequired\n};\nexport default CronPresetModal;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataMutation } from '@dhis2/app-runtime';\nconst mutation = {\n  resource: 'jobConfigurations',\n  id:\n  /* istanbul ignore next */\n  ({\n    id\n  }) => id,\n  type: 'delete'\n};\n\nconst DeleteJobModal = ({\n  id,\n  hideModal,\n  onSuccess\n}) => {\n  const [deleteJob] = useDataMutation(mutation);\n  return <Modal open small onClose={hideModal}>\n            <ModalContent>\n                {i18n.t('Are you sure you want to delete this job?')}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button name=\"hide-modal\" secondary onClick={hideModal}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button name={`delete-job-${id}`} destructive onClick={() => {\n          deleteJob({\n            id\n          }).then(() => {\n            hideModal();\n            onSuccess();\n          });\n        }}>\n                        {i18n.t('Delete')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func,\n  string\n} = PropTypes;\nDeleteJobModal.propTypes = {\n  hideModal: func.isRequired,\n  id: string.isRequired,\n  onSuccess: func.isRequired\n};\nexport default DeleteJobModal;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\n\nconst DiscardFormModal = ({\n  hideModal\n}) => <Modal open small onClose={hideModal}>\n        <ModalContent>\n            {i18n.t('Are you sure you want to discard this form?')}\n        </ModalContent>\n        <ModalActions>\n            <ButtonStrip end>\n                <Button name=\"cancel-discard-form\" secondary onClick={hideModal}>\n                    {i18n.t('Cancel')}\n                </Button>\n                <Button name=\"discard-form\" destructive onClick={() => {\n        hideModal();\n        history.push('/');\n      }}>\n                    {i18n.t('Discard')}\n                </Button>\n            </ButtonStrip>\n        </ModalActions>\n    </Modal>;\n\nconst {\n  func\n} = PropTypes;\nDiscardFormModal.propTypes = {\n  hideModal: func.isRequired\n};\nexport default DiscardFormModal;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { hooks } from '../Store';\n\nconst RunJobModal = ({\n  id,\n  hideModal\n}) => {\n  const engine = useDataEngine();\n  const query = {\n    jobs: {\n      resource: `jobConfigurations/${id}/execute`\n    }\n  };\n\n  const runJob = () => engine.query(query);\n\n  const refetchJobs = hooks.useRefetchJobs();\n  return <Modal open small onClose={hideModal}>\n            <ModalContent>\n                {i18n.t('Are you sure you want to run this job?')}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip end>\n                    <Button name=\"hide-modal\" secondary onClick={hideModal}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button name={`run-job-${id}`} primary onClick={() => {\n          runJob().then(() => {\n            hideModal();\n            refetchJobs();\n          });\n        }}>\n                        {i18n.t('Run')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\n\nconst {\n  func,\n  string\n} = PropTypes;\nRunJobModal.propTypes = {\n  hideModal: func.isRequired,\n  id: string.isRequired\n};\nexport default RunJobModal;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { RunJobModal } from '../Modal';\n\nconst RunJobAction = ({\n  id\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <MenuItem dense onClick={() => {\n      setShowModal(true);\n    }} label={i18n.t('Run manually')} />\n            {showModal && <RunJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} />}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nRunJobAction.propTypes = {\n  id: string.isRequired\n};\nexport default RunJobAction;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MenuItem } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DeleteJobModal } from '../Modal';\nimport { hooks } from '../Store';\n\nconst DeleteJobAction = ({\n  id\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const refetchJobs = hooks.useRefetchJobs();\n  return <React.Fragment>\n            <MenuItem dense destructive onClick={() => {\n      setShowModal(true);\n    }} label={i18n.t('Delete')} />\n            {showModal && <DeleteJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} onSuccess={refetchJobs} />}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nDeleteJobAction.propTypes = {\n  id: string.isRequired\n};\nexport default DeleteJobAction;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FlyoutMenu, DropdownButton } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport EditJobAction from './EditJobAction';\nimport ViewJobAction from './ViewJobAction';\nimport RunJobAction from './RunJobAction';\nimport DeleteJobAction from './DeleteJobAction';\n\nconst Actions = ({\n  id,\n  configurable\n}) => <DropdownButton small component={<FlyoutMenu>\n                {configurable ? <EditJobAction id={id} /> : <ViewJobAction id={id} />}\n                {configurable && <RunJobAction id={id} />}\n                {configurable && <DeleteJobAction id={id} />}\n            </FlyoutMenu>}>\n        {i18n.t('Actions')}\n    </DropdownButton>;\n\nActions.defaultProps = {\n  configurable: false\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nActions.propTypes = {\n  id: string.isRequired,\n  configurable: bool\n};\nexport default Actions;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Tag } from '@dhis2/ui';\nimport { jobStatusMap } from '../../services/server-translations';\n\nconst Status = ({\n  status\n}) => {\n  switch (status) {\n    case 'STOPPED':\n    case 'DISABLED':\n      return <Tag>{jobStatusMap[status]}</Tag>;\n\n    case 'RUNNING':\n    case 'NOT_STARTED':\n    case 'SCHEDULED':\n      return <Tag neutral>{jobStatusMap[status]}</Tag>;\n\n    case 'FAILED':\n      return <Tag negative>{jobStatusMap[status]}</Tag>;\n\n    case 'DONE':\n      return <Tag positive>{jobStatusMap[status]}</Tag>;\n    // Unrecognised status\n\n    default:\n      return null;\n  }\n};\n\nconst {\n  string\n} = PropTypes;\nStatus.propTypes = {\n  status: string.isRequired\n};\nexport default Status;","import moment from 'moment';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\n\nconst NextRun = ({\n  nextExecutionTime,\n  enabled\n}) => {\n  if (!enabled || !nextExecutionTime) {\n    return '-';\n  }\n\n  const now = moment(Date.now());\n  /**\n   * The recommendation is to run dhis2 on a server set to UTC time.\n   * In that case this timestamp is also UTC. If those recommendations\n   * weren't followed the time could be off, but there's nothing\n   * we can do to detect that.\n   */\n\n  const nextRun = moment.utc(nextExecutionTime);\n  const nextRunIsInPast = nextRun.isSameOrBefore(now, 'minute');\n  /**\n   * If the time is in the past, that could mean that the task is running,\n   * and the nextExecutionTime hasn't been updated yet.\n   */\n\n  if (nextRunIsInPast) {\n    return i18n.t('Not scheduled');\n  }\n\n  return now.to(nextRun);\n};\n\nconst {\n  bool,\n  string\n} = PropTypes;\nNextRun.propTypes = {\n  enabled: bool.isRequired,\n  nextExecutionTime: string\n};\nexport default NextRun;","const WEEKDAYS = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];\nconst MONTHS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n\nconst isValidFields = fields => fields && fields.length === 6;\n\nconst isValidNumber = (number, x, y) => number >= x && number <= y;\n\nconst isWildcard = field => field === '*';\n\nconst isUndefined = field => field === '?';\n\nconst isValidNumberRange = (range, x, y) => {\n  const boundaries = range.split('-');\n  if (!boundaries || boundaries.length !== 2) return false;\n  return isValidNumber(boundaries[0], x, y) && isValidNumber(boundaries[1], x, y) && boundaries[0] <= boundaries[1];\n};\n\nconst isValidFraction = (fraction, x, y) => {\n  const components = fraction.split('/');\n  if (!components || components.length !== 2) return false;\n  /* istanbul ignore next */\n\n  return (isWildcard(components[0]) || isValidNumber(components[0], x, y)) && isValidNumber(components[1], x, y);\n};\n\nconst isAlphabeticWeekday = field => {\n  const weekdays = field.split('-');\n  const [firstDay, secondDay] = weekdays.map(c => WEEKDAYS.indexOf(c));\n  return firstDay !== -1 && secondDay === undefined || firstDay !== -1 && secondDay !== -1 && firstDay <= secondDay;\n};\n\nconst isAlphabeticMonth = field => {\n  const months = field.split('-');\n  const [firstMonth, secondMonth] = months.map(m => MONTHS.indexOf(m));\n  /* istanbul ignore next */\n\n  return firstMonth !== -1 && secondMonth === undefined || firstMonth !== -1 && secondMonth !== -1 && firstMonth <= secondMonth;\n};\n\nconst isValidWithinRange = (field, x, y) => isWildcard(field) || isValidNumber(field, x, y) || isValidNumberRange(field, x, y) || isValidFraction(field, x, y);\n\nconst isValidSecondField = field => isValidWithinRange(field, 0, 59);\n\nconst isValidMinuteField = field => isValidWithinRange(field, 0, 59);\n\nconst isValidHourField = field => isValidWithinRange(field, 0, 23);\n\nconst isValidDayField = field => isValidWithinRange(field, 0, 31) || isUndefined(field);\n\nconst isValidMonthField = field => isValidWithinRange(field, 1, 12) || isAlphabeticMonth(field);\n\nconst isValidWeekdayField = field => isValidWithinRange(field, 1, 7) || isAlphabeticWeekday(field) || isUndefined(field);\n/**\n * Cron expression validation. Validates the Spring Scheduling pattern.\n * Format: <second> <minute> <hour> <day-of-month> <month> <day-of-week>\n * Source code: https://git.io/vpoqG\n * Documentation: https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html\n */\n\n\nconst validateCron = exp => {\n  if (!exp) {\n    return false;\n  }\n\n  const fields = exp.trim().split(' ');\n\n  if (!isValidFields(fields)) {\n    return false;\n  }\n\n  return isValidSecondField(fields[0]) && isValidMinuteField(fields[1]) && isValidHourField(fields[2]) && isValidDayField(fields[3]) && isValidMonthField(fields[4]) && isValidWeekdayField(fields[5]);\n};\n\nexport default validateCron;","import i18n from '@dhis2/d2-i18n';\nimport validateCron from './validate-cron';\n\nconst requiredCron = value => {\n  const isString = typeof value === 'string';\n  const isFilled = isString && value.length > 0;\n\n  if (!isFilled) {\n    return i18n.t('A CRON expression is required');\n  }\n\n  if (!validateCron(value)) {\n    return i18n.t('Please enter a valid CRON expression');\n  }\n\n  return undefined;\n};\n\nexport default requiredCron;","import cronstrue from 'cronstrue/i18n';\nimport i18n from '@dhis2/d2-i18n';\nimport { validateCron } from '../validators';\nconst fallback = 'en';\n\nconst translateCron = cron => {\n  const locale = i18n.language || fallback;\n  const isValid = cron && validateCron(cron);\n\n  if (!isValid) {\n    return '';\n  }\n\n  return cronstrue.toString(cron, {\n    locale\n  });\n};\n\nexport default translateCron;","import translateCron from './translate-cron';\nexport default translateCron;","import { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport translateCron from '../../services/translate-cron';\n\nconst Schedule = ({\n  cronExpression,\n  schedulingType,\n  delay\n}) => {\n  switch (schedulingType) {\n    case 'CRON':\n      return translateCron(cronExpression);\n\n    case 'FIXED_DELAY':\n      return i18n.t('{{ delay }} seconds after last run', {\n        delay\n      });\n\n    default:\n      // Unrecognised or invalid type\n      return '-';\n  }\n};\n\nconst {\n  string,\n  number\n} = PropTypes;\nSchedule.propTypes = {\n  schedulingType: string.isRequired,\n  cronExpression: string,\n  delay: number\n};\nexport default Schedule;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { TableRow, TableCell } from '@dhis2/ui';\nimport { jobTypesMap } from '../../services/server-translations';\nimport { ToggleJobSwitch } from '../Switches';\nimport Actions from './Actions';\nimport Status from './Status';\nimport NextRun from './NextRun';\nimport Schedule from './Schedule';\n\nconst JobTableRow = ({\n  job: {\n    id,\n    displayName,\n    jobType,\n    cronExpression,\n    delay,\n    jobStatus,\n    nextExecutionTime,\n    schedulingType,\n    enabled,\n    configurable\n  }\n}) => <TableRow>\n        <TableCell>{displayName}</TableCell>\n        <TableCell>{jobTypesMap[jobType]}</TableCell>\n        <TableCell>\n            <Schedule cronExpression={cronExpression} delay={delay} schedulingType={schedulingType} />\n        </TableCell>\n        <TableCell>\n            <NextRun nextExecutionTime={nextExecutionTime} enabled={enabled} />\n        </TableCell>\n        <TableCell>\n            <Status status={jobStatus} />\n        </TableCell>\n        <TableCell>\n            <ToggleJobSwitch id={id} checked={enabled} disabled={!configurable} />\n        </TableCell>\n        <TableCell>\n            <Actions id={id} configurable={configurable} />\n        </TableCell>\n    </TableRow>;\n\nconst {\n  shape,\n  string,\n  bool,\n  number\n} = PropTypes;\nJobTableRow.propTypes = {\n  job: shape({\n    displayName: string.isRequired,\n    enabled: bool.isRequired,\n    id: string.isRequired,\n    jobStatus: string.isRequired,\n    jobType: string.isRequired,\n    schedulingType: string.isRequired,\n    cronExpression: string,\n    delay: number,\n    nextExecutionTime: string\n  }).isRequired\n};\nexport default JobTableRow;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport JobTableRow from './JobTableRow';\n\nconst JobTable = ({\n  jobs\n}) => <Table>\n        <TableHead>\n            <TableRowHead>\n                <TableCellHead>{i18n.t('Job name')}</TableCellHead>\n                <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                <TableCellHead>{i18n.t('Schedule')}</TableCellHead>\n                <TableCellHead>{i18n.t('Next run')}</TableCellHead>\n                <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                <TableCellHead>{i18n.t('On/off')}</TableCellHead>\n                <TableCellHead />\n            </TableRowHead>\n        </TableHead>\n        <TableBody>\n            {jobs.length === 0 ? <TableRow>\n                    <TableCell>{i18n.t('No jobs to display')}</TableCell>\n                </TableRow> : jobs.map(job => <JobTableRow key={job.id} job={job} />)}\n        </TableBody>\n    </Table>;\n\nconst {\n  object,\n  arrayOf\n} = PropTypes;\nJobTable.propTypes = {\n  jobs: arrayOf(object).isRequired\n};\nexport default JobTable;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, Checkbox, Input, Button, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport history from '../../services/history';\nimport { JobTable } from '../../components/JobTable';\nimport styles from './JobList.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobList = ({\n  jobs,\n  showSystemJobs,\n  setShowSystemJobs,\n  jobFilter,\n  setJobFilter\n}) => {\n  return <React.Fragment>\n            <header className={styles.header}>\n                <h1 className={styles.headerTitle}>\n                    {i18n.t('Scheduled jobs')}\n                </h1>\n                <a href={infoLink} className={styles.headerLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.headerLinkIcon}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <Card>\n                <div className={styles.controlContainer}>\n                    <Input dataTest=\"job-filter-input\" placeholder={i18n.t('Filter jobs')} onChange={({\n          value\n        }) => {\n          setJobFilter(value);\n        }} value={jobFilter} />\n                    <div className={styles.controlRight}>\n                        <Checkbox dataTest=\"job-toggle-checkbox\" checked={showSystemJobs} label={i18n.t('Include system jobs in list')} onChange={({\n            checked\n          }) => {\n            setShowSystemJobs(checked);\n          }} />\n                        <Button dataTest=\"new-job-button\" onClick={() => {\n            history.push('/add');\n          }}>\n                            {i18n.t('New job')}\n                        </Button>\n                    </div>\n                </div>\n                <JobTable jobs={jobs} />\n            </Card>\n        </React.Fragment>;\n};\n\nconst {\n  bool,\n  object,\n  string,\n  arrayOf,\n  func\n} = PropTypes;\nJobList.propTypes = {\n  jobFilter: string.isRequired,\n  jobs: arrayOf(object).isRequired,\n  setJobFilter: func.isRequired,\n  setShowSystemJobs: func.isRequired,\n  showSystemJobs: bool.isRequired\n};\nexport default JobList;","import React from 'react';\nimport { hooks } from '../../components/Store';\nimport JobList from './JobList';\n\nconst JobListContainer = () => {\n  const [jobFilter, setJobFilter] = hooks.useJobFilter();\n  const [showSystemJobs, setShowSystemJobs] = hooks.useShowSystemJobs();\n  const jobs = hooks.useJobListJobs();\n  return <JobList jobs={jobs} showSystemJobs={showSystemJobs} setShowSystemJobs={setShowSystemJobs} jobFilter={jobFilter} setJobFilter={setJobFilter} />;\n};\n\nexport default JobListContainer;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { CronPresetModal } from '../Modal';\n\nconst CronPresetButton = ({\n  setCron,\n  small\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <Button onClick={() => setShowModal(true)} small={small}>\n                {i18n.t('Choose from preset times')}\n            </Button>\n            {showModal && <CronPresetModal hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} setCron={setCron} />}\n        </React.Fragment>;\n};\n\nCronPresetButton.defaultProps = {\n  small: false\n};\nconst {\n  func,\n  bool\n} = PropTypes;\nCronPresetButton.propTypes = {\n  setCron: func.isRequired,\n  small: bool\n};\nexport default CronPresetButton;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DeleteJobModal } from '../Modal';\n\nconst DeleteJobButton = ({\n  id,\n  onSuccess\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  return <React.Fragment>\n            <Button destructive onClick={() => setShowModal(true)}>\n                {i18n.t('Delete job')}\n            </Button>\n            {showModal && <DeleteJobModal id={id} hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} onSuccess={onSuccess} />}\n        </React.Fragment>;\n};\n\nconst {\n  string,\n  func\n} = PropTypes;\nDeleteJobButton.propTypes = {\n  id: string.isRequired,\n  onSuccess: func.isRequired\n};\nexport default DeleteJobButton;","import React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Button } from '@dhis2/ui';\nimport history from '../../services/history';\nimport { DiscardFormModal } from '../Modal';\n\nconst DiscardFormButton = ({\n  shouldConfirm,\n  children,\n  small,\n  className\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const onClick = shouldConfirm ? () => setShowModal(true) : () => history.push('/');\n  return <React.Fragment>\n            <Button onClick={onClick} small={small} className={className}>\n                {children}\n            </Button>\n            {showModal && <DiscardFormModal hideModal={\n    /* istanbul ignore next */\n    () => setShowModal(false)} />}\n        </React.Fragment>;\n};\n\nDiscardFormButton.defaultProps = {\n  className: '',\n  shouldConfirm: false,\n  small: false\n};\nconst {\n  string,\n  bool\n} = PropTypes;\nDiscardFormButton.propTypes = {\n  children: string.isRequired,\n  className: string,\n  shouldConfirm: bool,\n  small: bool\n};\nexport default DiscardFormButton;","import { FinalForm } from '@dhis2/ui';\nconst {\n  FORM_ERROR\n} = FinalForm;\n/**\n * Formats the errors returned by our backend to a format that final-form can parse\n */\n\nconst formatError = error => {\n  const {\n    details: {\n      response\n    }\n  } = error;\n  const validationErrors = {};\n  /**\n   * Some backend errors do not have a way for us to infer the related field,\n   * those can be put in genericErrors\n   */\n\n  const genericErrors = [];\n\n  if (response.errorReports && response.errorReports.length) {\n    response.errorReports.forEach(report => {\n      /**\n       * errorProperty is how the backend indicates the field that the error\n       * is related to. If we know this, return it as a field specific error\n       * (note that this will swallow errors if the backend indicates a field\n       * that does not exist in the frontend). Otherwise we'll push it to the\n       * generic errors.\n       */\n      if (report.errorProperty) {\n        validationErrors[report.errorProperty] = report.message;\n      } else {\n        genericErrors.push(report.message);\n      }\n    });\n  }\n\n  if (genericErrors.length > 0) {\n    validationErrors[FORM_ERROR] = genericErrors;\n  }\n\n  return validationErrors;\n};\n\nexport default formatError;","import formatError from './format-error';\nexport default formatError;","import { useContext } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { StoreContext } from '../../components/Store';\nimport history from '../../services/history';\nimport formatError from '../../services/format-error';\nconst mutation = {\n  resource: 'jobConfigurations',\n  type: 'create',\n  data:\n  /* istanbul ignore next */\n  ({\n    job\n  }) => job\n};\n\nconst useSubmitJob = () => {\n  const {\n    refetchJobs\n  } = useContext(StoreContext);\n  const engine = useDataEngine();\n\n  const submitJob = job => engine.mutate(mutation, {\n    variables: {\n      job\n    }\n  }).then(() => {\n    history.push('/');\n    refetchJobs();\n  }).catch(error => {\n    const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n    if (isValidationError) {\n      return formatError(error);\n    } // Throw any unexpected errors\n\n\n    throw error;\n  });\n\n  return [submitJob];\n};\n\nexport default useSubmitJob;","import { useContext } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { StoreContext } from '../../components/Store';\nimport history from '../../services/history';\nimport formatError from '../../services/format-error';\nconst mutation = {\n  resource: 'jobConfigurations',\n  type: 'update',\n  id:\n  /* istanbul ignore next */\n  ({\n    id\n  }) => id,\n  data:\n  /* istanbul ignore next */\n  ({\n    job\n  }) => job\n};\n\nconst useUpdateJob = ({\n  id\n}) => {\n  const {\n    refetchJobs\n  } = useContext(StoreContext);\n  const engine = useDataEngine();\n\n  const updateJob = job => engine.mutate(mutation, {\n    variables: {\n      job,\n      id\n    }\n  }).then(() => {\n    history.push('/');\n    refetchJobs();\n  }).catch(error => {\n    const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n    if (isValidationError) {\n      return formatError(error);\n    } // Throw any unexpected errors\n\n\n    throw error;\n  });\n\n  return [updateJob];\n};\n\nexport default useUpdateJob;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { NoticeBox } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport styles from './FormErrorBox.module.css';\n\nconst FormErrorBox = ({\n  submitError\n}) => {\n  const hasGenericSubmitErrors = submitError.length > 0;\n\n  if (!hasGenericSubmitErrors) {\n    return null;\n  }\n\n  return <NoticeBox error title={i18n.t('Something went wrong whilst creating your job')}>\n            <ul className={styles.list}>\n                {submitError.map(error => <li key={error}>{error}</li>)}\n            </ul>\n        </NoticeBox>;\n};\n\nconst {\n  array\n} = PropTypes;\nFormErrorBox.propTypes = {\n  submitError: array.isRequired\n};\nexport default FormErrorBox;","import React from 'react';\nimport { ReactFinalForm, InputFieldFF, composeValidators, hasValue, string } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nconst {\n  Field\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'name';\nconst VALIDATOR = composeValidators(string, hasValue);\n\nconst JobNameField = () => <Field name={FIELD_NAME} component={InputFieldFF} validate={VALIDATOR} label={i18n.t('Name')} type=\"text\" required />;\n\nexport default JobNameField;","import React from 'react';\nimport { ReactFinalForm, SingleSelectFieldFF, composeValidators, hasValue, string } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { hooks } from '../Store';\nimport { jobTypesMap } from '../../services/server-translations';\nconst {\n  Field\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nexport const FIELD_NAME = 'jobType';\nconst VALIDATOR = composeValidators(string, hasValue);\n\nconst JobTypeField = () => {\n  const jobTypes = hooks.useAllJobTypes();\n  const options = jobTypes.map(({\n    jobType\n  }) => ({\n    value: jobType,\n    label: jobTypesMap[jobType]\n  }));\n  return <Field name={FIELD_NAME} validate={VALIDATOR} component={SingleSelectFieldFF} options={options} label={i18n.t('Job type')} required />;\n};\n\nexport default JobTypeField;","/**\n * Our backend returns certain values as a number, but our\n * inputs expect and return a string, so we're formatting them to strings\n */\nexport const formatToString = value => {\n  if (typeof value === 'number') {\n    return value.toString();\n  }\n\n  return value;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { MultiSelectField, ReactFinalForm, MultiSelectFieldFF } from '@dhis2/ui';\nimport { hooks } from '../Store';\nimport { analyticsTableTypes } from '../../services/server-translations';\nconst {\n  Field\n} = ReactFinalForm;\n\nconst SkipTableTypesField = ({\n  label,\n  name,\n  parameterName\n}) => {\n  const options = hooks.useParameterOptions(parameterName);\n\n  if (options.length === 0) {\n    return <MultiSelectField disabled helpText={i18n.t('No options available')} label={label} />;\n  }\n\n  const translatedOptions = options.map(option => ({\n    value: option,\n    label: analyticsTableTypes[option] || option\n  }));\n  return <Field name={name} component={MultiSelectFieldFF} options={translatedOptions} label={label} />;\n};\n\nconst {\n  string\n} = PropTypes;\nSkipTableTypesField.propTypes = {\n  label: string.isRequired,\n  name: string.isRequired,\n  parameterName: string.isRequired\n};\nexport default SkipTableTypesField;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { MultiSelectFieldFF, ReactFinalForm, MultiSelectField } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { hooks } from '../Store';\nconst {\n  Field\n} = ReactFinalForm; // A labeled options field has options that have both an id and a label.\n\nconst LabeledOptionsField = ({\n  label,\n  name,\n  parameterName\n}) => {\n  const options = hooks.useParameterOptions(parameterName);\n\n  if (options.length === 0) {\n    return <MultiSelectField disabled helpText={i18n.t('No options available')} label={label} />;\n  }\n\n  const labeledOptions = options.map(({\n    id,\n    displayName\n  }) => ({\n    value: id,\n    label: displayName\n  }));\n  return <Field name={name} component={MultiSelectFieldFF} options={labeledOptions} label={label} />;\n};\n\nconst {\n  string\n} = PropTypes;\nLabeledOptionsField.propTypes = {\n  label: string.isRequired,\n  name: string.isRequired,\n  parameterName: string.isRequired\n};\nexport default LabeledOptionsField;","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, InputFieldFF, SwitchFieldFF, Box } from '@dhis2/ui';\nimport { hooks } from '../Store';\nimport { formatToString } from './formatters';\nimport SkipTableTypesField from './SkipTableTypesField';\nimport LabeledOptionsField from './LabeledOptionsField';\nimport styles from './ParameterFields.module.css';\nconst {\n  Field\n} = ReactFinalForm; // The key under which the parameters will be sent to the backend\n\nconst FIELD_NAME = 'jobParameters'; // Renders all parameters for a given jobtype\n\nconst ParameterFields = ({\n  jobType\n}) => {\n  const parameters = hooks.useJobTypeParameters(jobType);\n\n  if (parameters.length === 0) {\n    return null;\n  } // Map all parameters to the appropriate field types\n\n\n  const parameterComponents = parameters.map(({\n    fieldName,\n    name,\n    klass\n  }) => {\n    const defaultProps = {\n      label: fieldName,\n      name: `${FIELD_NAME}.${name}`\n    };\n    let parameterComponent = null; // Specific case, as the options here need specific translations\n\n    if (name === 'skipTableTypes') {\n      return <Box marginTop=\"16px\" key={name}>\n                    <SkipTableTypesField {...defaultProps} parameterName={name} />\n                </Box>;\n    } // Generic field rendering\n\n\n    switch (klass) {\n      case 'java.lang.String':\n        parameterComponent = <Field {...defaultProps} component={InputFieldFF} type=\"text\" />;\n        break;\n\n      case 'java.lang.Boolean':\n        parameterComponent = <Field {...defaultProps} component={SwitchFieldFF} type=\"checkbox\" />;\n        break;\n\n      case 'java.lang.Integer':\n        parameterComponent = <Field {...defaultProps} component={InputFieldFF} format={formatToString} type=\"number\" />;\n        break;\n\n      case 'java.util.List':\n        parameterComponent = <LabeledOptionsField {...defaultProps} parameterName={name} />;\n        break;\n    } // Wrap all components in a Box for spacing\n\n\n    return <Box marginTop=\"16px\" key={name}>\n                {parameterComponent}\n            </Box>;\n  });\n  return <React.Fragment>\n            <header>\n                <h4 className={styles.headerTitle}>{i18n.t('Parameters')}</h4>\n            </header>\n            {parameterComponents}\n        </React.Fragment>;\n};\n\nconst {\n  string\n} = PropTypes;\nParameterFields.propTypes = {\n  jobType: string.isRequired\n};\nexport default ParameterFields;","import React from 'react';\nimport { Box, ReactFinalForm, InputFieldFF } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { requiredCron } from '../../services/validators';\nimport { CronPresetButton } from '../Buttons';\nimport translateCron from '../../services/translate-cron';\nconst {\n  Field,\n  useFormState,\n  useForm\n} = ReactFinalForm; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'cronExpression';\nconst VALIDATOR = requiredCron;\n\nconst CronField = () => {\n  const form = useForm();\n  const {\n    values\n  } = useFormState({\n    subscription: {\n      values: true\n    }\n  });\n  const cronExpression = values[FIELD_NAME];\n  const helpText = translateCron(cronExpression);\n  return <React.Fragment>\n            <Field component={InputFieldFF} name={FIELD_NAME} validate={VALIDATOR} label={i18n.t('CRON Expression')} type=\"text\" helpText={helpText} required />\n            <Box marginTop=\"8px\">\n                <CronPresetButton setCron={\n      /* istanbul ignore next */\n      cron => form.change(FIELD_NAME, cron)} small />\n            </Box>\n        </React.Fragment>;\n};\n\nexport default CronField;","import React from 'react';\nimport { ReactFinalForm, InputFieldFF, composeValidators, hasValue, integer, createNumberRange } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { formatToString } from './formatters';\nconst {\n  Field\n} = ReactFinalForm; // Omitting the underscore here since it messes up i18n\n\nconst lowerbound = 1;\nconst upperbound = 86400; // The key under which this field will be sent to the backend\n\nconst FIELD_NAME = 'delay';\nconst VALIDATOR = composeValidators(integer, hasValue, createNumberRange(lowerbound, upperbound));\n\nconst DelayField = () => <Field component={InputFieldFF} name={FIELD_NAME} validate={VALIDATOR} label={i18n.t('Delay')} type=\"number\" format={formatToString} helpText={i18n.t('Delay in seconds ({{ lowerbound }} - {{ upperbound }})', {\n  lowerbound,\n  upperbound\n})} required />;\n\nexport default DelayField;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { hooks } from '../Store';\nimport CronField from './CronField';\nimport DelayField from './DelayField';\n\nconst ScheduleField = ({\n  jobType\n}) => {\n  const currentJobType = hooks.useJobType(jobType);\n  const schedulingType = currentJobType.schedulingType;\n\n  switch (schedulingType) {\n    case 'CRON':\n      return <CronField />;\n\n    case 'FIXED_DELAY':\n      return <DelayField />;\n\n    default:\n      // Unrecognised scheduling type\n      return null;\n  }\n};\n\nconst {\n  string\n} = PropTypes;\nScheduleField.propTypes = {\n  jobType: string.isRequired\n};\nexport default ScheduleField;","import JobNameField from './JobNameField';\nimport JobTypeField, { FIELD_NAME as JOB_TYPE } from './JobTypeField';\nimport ParameterFields from './ParameterFields';\nimport ScheduleField from './ScheduleField';\nconst fieldNames = {\n  JOB_TYPE\n};\nexport { JobNameField, ScheduleField, JobTypeField, ParameterFields, fieldNames };","import React, { useEffect } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, CircularLoader, Box, ReactFinalForm } from '@dhis2/ui';\nimport { DiscardFormButton } from '../Buttons';\nimport { FormErrorBox } from '../FormErrorBox';\nimport { ScheduleField, JobNameField, JobTypeField, ParameterFields, fieldNames } from '../FormFields';\nimport styles from './JobAddForm.module.css';\nconst {\n  useForm\n} = ReactFinalForm;\n\nconst JobAddForm = ({\n  handleSubmit,\n  pristine,\n  submitting,\n  submitError,\n  hasSubmitErrors,\n  values,\n  setIsPristine\n}) => {\n  const {\n    subscribe\n  } = useForm();\n  /**\n   * Lift pristine state up on changes, wrapped in useEffect because calls to setState\n   * outside of the component that owns the setState should not happen synchronously.\n   */\n\n  useEffect(() =>\n  /**\n   * The subscriber will only be called when pristine changes. It returns a\n   * cleanup function.\n   * https://final-form.org/docs/final-form/types/FormApi#subscribe\n   */\n  subscribe(({\n    pristine\n  }) => setIsPristine(pristine), {\n    pristine: true\n  })); // Check if there's currently a selected job type\n\n  const jobType = values[fieldNames.JOB_TYPE]; // Show a spinner only when submitting\n\n  const Spinner = submitting ? <CircularLoader small /> : null;\n  return <form onSubmit={handleSubmit}>\n            <Box maxWidth=\"600px\">\n                <JobNameField />\n            </Box>\n            <Box marginTop=\"16px\" maxWidth=\"400px\">\n                <JobTypeField />\n            </Box>\n            {jobType && <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <ScheduleField jobType={jobType} />\n                </Box>}\n            {jobType && <Box marginTop=\"32px\" maxWidth=\"400px\">\n                    <ParameterFields jobType={jobType} />\n                </Box>}\n            {hasSubmitErrors && <Box marginTop=\"32px\" maxWidth=\"600px\">\n                    <FormErrorBox submitError={submitError} />\n                </Box>}\n            <div className={styles.formButtonContainer}>\n                <Button primary type=\"submit\" disabled={pristine || submitting} icon={Spinner} className={styles.saveButton}>\n                    {i18n.t('Save')}\n                </Button>\n                <DiscardFormButton shouldConfirm={!pristine}>\n                    {i18n.t('Cancel')}\n                </DiscardFormButton>\n            </div>\n        </form>;\n};\n\nconst {\n  func,\n  bool,\n  object,\n  array\n} = PropTypes;\nJobAddForm.defaultProps = {\n  submitError: []\n};\nJobAddForm.propTypes = {\n  handleSubmit: func.isRequired,\n  hasSubmitErrors: bool.isRequired,\n  pristine: bool.isRequired,\n  setIsPristine: func.isRequired,\n  submitting: bool.isRequired,\n  values: object.isRequired,\n  submitError: array\n};\nexport default JobAddForm;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm } from '@dhis2/ui';\nimport { useSubmitJob } from '../../hooks/jobs';\nimport JobAddForm from './JobAddForm';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst JobAddFormContainer = ({\n  setIsPristine\n}) => {\n  const [submitJob] = useSubmitJob();\n  /**\n   * destroyOnUnregister is enabled so that dynamic fields will be unregistered\n   * when they're removed from the form, for instance when the jobType changes.\n   */\n\n  return <Form onSubmit={submitJob} component={JobAddForm} setIsPristine={setIsPristine} destroyOnUnregister />;\n};\n\nconst {\n  func\n} = PropTypes;\nJobAddFormContainer.propTypes = {\n  setIsPristine: func.isRequired\n};\nexport default JobAddFormContainer;","import React, { useEffect } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, CircularLoader, Box, ReactFinalForm } from '@dhis2/ui';\nimport history from '../../services/history';\nimport { DiscardFormButton, DeleteJobButton } from '../Buttons';\nimport { FormErrorBox } from '../FormErrorBox';\nimport { ScheduleField, JobNameField, JobTypeField, ParameterFields, fieldNames } from '../FormFields';\nimport styles from './JobEditForm.module.css';\nconst {\n  useForm\n} = ReactFinalForm;\n\nconst JobEditForm = ({\n  id,\n  refetchJobs,\n  handleSubmit,\n  pristine,\n  submitting,\n  submitError,\n  hasSubmitErrors,\n  values,\n  setIsPristine\n}) => {\n  const {\n    subscribe\n  } = useForm();\n  /**\n   * Lift pristine state up on changes, wrapped in useEffect because calls to setState\n   * outside of the component that owns the setState should not happen synchronously.\n   */\n\n  useEffect(() =>\n  /**\n   * The subscriber will only be called when pristine changes. It returns a\n   * cleanup function.\n   * https://final-form.org/docs/final-form/types/FormApi#subscribe\n   */\n  subscribe(({\n    pristine\n  }) => setIsPristine(pristine), {\n    pristine: true\n  })); // Check if there's currently a selected job type\n\n  const jobType = values[fieldNames.JOB_TYPE]; // Show a spinner only when submitting\n\n  const Spinner = submitting ? <CircularLoader small /> : null;\n  return <form onSubmit={handleSubmit}>\n            <Box maxWidth=\"600px\">\n                <JobNameField />\n            </Box>\n            <Box marginTop=\"16px\" maxWidth=\"400px\">\n                <JobTypeField />\n            </Box>\n            {jobType && <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <ScheduleField jobType={jobType} />\n                </Box>}\n            {jobType && <Box marginTop=\"32px\" maxWidth=\"400px\">\n                    <ParameterFields jobType={jobType} />\n                </Box>}\n            {hasSubmitErrors && <Box marginTop=\"32px\" maxWidth=\"600px\">\n                    <FormErrorBox submitError={submitError} />\n                </Box>}\n            <div className={styles.formButtonContainer}>\n                <Button primary type=\"submit\" disabled={pristine || submitting} icon={Spinner} className={styles.saveButton}>\n                    {i18n.t('Save')}\n                </Button>\n                <DiscardFormButton shouldConfirm={!pristine}>\n                    {i18n.t('Cancel')}\n                </DiscardFormButton>\n                <span className={styles.deleteButton}>\n                    <DeleteJobButton id={id} onSuccess={() => {\n          history.push('/');\n          refetchJobs();\n        }} />\n                </span>\n            </div>\n        </form>;\n};\n\nconst {\n  func,\n  bool,\n  object,\n  array,\n  string\n} = PropTypes;\nJobEditForm.defaultProps = {\n  submitError: []\n};\nJobEditForm.propTypes = {\n  handleSubmit: func.isRequired,\n  hasSubmitErrors: bool.isRequired,\n  id: string.isRequired,\n  pristine: bool.isRequired,\n  refetchJobs: func.isRequired,\n  setIsPristine: func.isRequired,\n  submitting: bool.isRequired,\n  values: object.isRequired,\n  submitError: array\n};\nexport default JobEditForm;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm } from '@dhis2/ui';\nimport { useParams } from 'react-router-dom';\nimport { useUpdateJob } from '../../hooks/jobs';\nimport { hooks } from '../Store';\nimport JobEditForm from './JobEditForm';\nconst {\n  Form\n} = ReactFinalForm;\n/**\n * The fields we need for the initialValues for our form fields. Since we use\n * these values to set the initial values in final-form, if we wouldn't filter\n * them we'd end up submitting way more data than we intend to.\n */\n\nconst initialFields = ['cronExpression', 'delay', 'jobParameters', 'jobType', 'name', 'schedulingType'];\n\nconst JobEditFormContainer = ({\n  setIsPristine\n}) => {\n  const {\n    id\n  } = useParams();\n  const [updateJob] = useUpdateJob({\n    id\n  });\n  const refetchJobs = hooks.useRefetchJobs();\n  const job = hooks.useJob(id); // Creating an object with just the values we want to use as initial values\n\n  const initialValues = initialFields.reduce((filtered, key) => {\n    filtered[key] = job[key];\n    return filtered;\n  }, {});\n  /**\n   * destroyOnUnregister is enabled so that dynamic fields will be unregistered\n   * when they're removed from the form, for instance when the jobType changes.\n   */\n\n  /* istanbul ignore next: we're testing this section, but coverage reporting seems to disagree */\n\n  return <Form onSubmit={updateJob} component={JobEditForm} setIsPristine={setIsPristine} initialValues={initialValues} id={id} refetchJobs={refetchJobs} destroyOnUnregister />;\n};\n\nconst {\n  func\n} = PropTypes;\nJobEditFormContainer.propTypes = {\n  setIsPristine: func.isRequired\n};\nexport default JobEditFormContainer;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport { jobStatusMap } from '../../services/server-translations';\nimport styles from './JobDetails.module.css';\n\nconst JobDetails = ({\n  created,\n  lastExecutedStatus,\n  lastExecuted\n}) => {\n  // Using Date.now allows for easier mocking\n  const now = Date.now();\n  const createdFromNow = moment(created).from(now);\n  const translatedStatus = jobStatusMap[lastExecutedStatus];\n  const lastRunFromNow = lastExecuted ? moment(lastExecuted).from(now) : '';\n  return <div className={styles.wrapper}>\n            <h4 className={styles.title}>{i18n.t('Job details')}</h4>\n            <div className={styles.details}>\n                <div>\n                    {i18n.t('Created {{ createdFromNow }}.', {\n          createdFromNow\n        })}\n                </div>\n                {lastRunFromNow && <div>\n                        {i18n.t('Last run {{ lastRunFromNow }}.', {\n          lastRunFromNow\n        })}\n                    </div>}\n                {translatedStatus && <div>\n                        {i18n.t('Last run status: {{ translatedStatus }}.', {\n          translatedStatus,\n          nsSeparator: '>'\n        })}\n                    </div>}\n            </div>\n        </div>;\n};\n\nconst {\n  string\n} = PropTypes;\nJobDetails.propTypes = {\n  created: string.isRequired,\n  lastExecutedStatus: string.isRequired,\n  lastExecuted: string\n};\nexport default JobDetails;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DiscardFormButton } from '../../components/Buttons';\nimport { JobEditFormContainer } from '../../components/Forms';\nimport { JobDetails } from '../../components/JobDetails';\nimport styles from './JobEdit.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobEdit = ({\n  isPristine,\n  setIsPristine,\n  name,\n  created,\n  lastExecutedStatus,\n  lastExecuted\n}) => <React.Fragment>\n        <header className={styles.pageHeader}>\n            <DiscardFormButton shouldConfirm={!isPristine} className={styles.pageHeaderButton} small>\n                {i18n.t('Back to all jobs')}\n            </DiscardFormButton>\n            <h2 className={styles.pageHeaderTitle}>\n                {i18n.t('Job: {{ name }}', {\n        name,\n        nsSeparator: '>'\n      })}\n            </h2>\n        </header>\n        <Card className={styles.card}>\n            <header className={styles.cardHeader}>\n                <h3 className={styles.cardHeaderTitle}>\n                    {i18n.t('Configuration')}\n                </h3>\n                <a href={infoLink} className={styles.cardHeaderLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.cardHeaderInfo}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <div className={styles.jobDetails}>\n                <JobDetails created={created} lastExecutedStatus={lastExecutedStatus} lastExecuted={lastExecuted} />\n            </div>\n            <JobEditFormContainer setIsPristine={setIsPristine} />\n        </Card>\n    </React.Fragment>;\n\nconst {\n  bool,\n  func,\n  string\n} = PropTypes;\nJobEdit.propTypes = {\n  created: string.isRequired,\n  isPristine: bool.isRequired,\n  lastExecuted: string.isRequired,\n  lastExecutedStatus: string.isRequired,\n  name: string.isRequired,\n  setIsPristine: func.isRequired\n};\nexport default JobEdit;","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { hooks } from '../../components/Store';\nimport JobEdit from './JobEdit';\n\nconst JobEditContainer = () => {\n  const [isPristine, setIsPristine] = useState(true);\n  const {\n    id\n  } = useParams();\n  const job = hooks.useJob(id);\n  return <JobEdit isPristine={isPristine} setIsPristine={setIsPristine} name={job.name} created={job.created} lastExecutedStatus={job.lastExecutedStatus} lastExecuted={job.lastExecuted} />;\n};\n\nexport default JobEditContainer;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, IconInfo16, Box, SingleSelectField, SingleSelectOption, InputField } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { hooks } from '../../components/Store';\nimport { DiscardFormButton } from '../../components/Buttons';\nimport { JobDetails } from '../../components/JobDetails';\nimport translateCron from '../../services/translate-cron';\nimport { jobTypesMap } from '../../services/server-translations';\nimport styles from './JobView.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobView = () => {\n  const {\n    id\n  } = useParams();\n  const {\n    name,\n    created,\n    lastExecutedStatus,\n    lastExecuted,\n    jobType,\n    cronExpression\n  } = hooks.useJob(id);\n  return <React.Fragment>\n            <header className={styles.pageHeader}>\n                <DiscardFormButton className={styles.pageHeaderButton} small>\n                    {i18n.t('Back to all jobs')}\n                </DiscardFormButton>\n                <h2 className={styles.pageHeaderTitle}>\n                    {i18n.t('System job: {{ name }}', {\n          name,\n          nsSeparator: '>'\n        })}\n                </h2>\n            </header>\n            <Card className={styles.card}>\n                <header className={styles.cardHeader}>\n                    <h3 className={styles.cardHeaderTitle}>\n                        {i18n.t('Configuration')}\n                    </h3>\n                    <a href={infoLink} className={styles.cardHeaderLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <span className={styles.cardHeaderInfo}>\n                            <IconInfo16 />\n                        </span>\n                        {i18n.t('About job configuration')}\n                    </a>\n                </header>\n                <div className={styles.jobDetails}>\n                    <JobDetails created={created} lastExecutedStatus={lastExecutedStatus} lastExecuted={lastExecuted} />\n                </div>\n                <Box maxWidth=\"600px\">\n                    <InputField label={i18n.t('Name')} disabled value={name} />\n                </Box>\n                <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <SingleSelectField label={i18n.t('Job type')} disabled selected={jobType}>\n                        <SingleSelectOption value={jobType} label={jobTypesMap[jobType]} />\n                    </SingleSelectField>\n                </Box>\n                <Box marginTop=\"16px\" maxWidth=\"400px\">\n                    <InputField label={i18n.t('CRON Expression')} disabled value={cronExpression} helpText={translateCron(cronExpression)} />\n                </Box>\n                <Box marginTop=\"24px\">\n                    <DiscardFormButton>\n                        {i18n.t('Back to all jobs')}\n                    </DiscardFormButton>\n                </Box>\n            </Card>\n        </React.Fragment>;\n};\n\nexport default JobView;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { Card, IconInfo16 } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { DiscardFormButton } from '../../components/Buttons';\nimport { JobAddFormContainer } from '../../components/Forms';\nimport styles from './JobAdd.module.css';\nconst infoLink = 'https://docs.dhis2.org/master/en/user/html/dataAdmin_scheduling.html#dataAdmin_scheduling_config';\n\nconst JobAdd = ({\n  isPristine,\n  setIsPristine\n}) => <React.Fragment>\n        <header className={styles.pageHeader}>\n            <DiscardFormButton shouldConfirm={!isPristine} className={styles.pageHeaderButton} small>\n                {i18n.t('Back to all jobs')}\n            </DiscardFormButton>\n            <h2 className={styles.pageHeaderTitle}>{i18n.t('New Job')}</h2>\n        </header>\n        <Card className={styles.card}>\n            <header className={styles.cardHeader}>\n                <h3 className={styles.cardHeaderTitle}>\n                    {i18n.t('Configuration')}\n                </h3>\n                <a href={infoLink} className={styles.cardHeaderLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <span className={styles.cardHeaderInfo}>\n                        <IconInfo16 />\n                    </span>\n                    {i18n.t('About job configuration')}\n                </a>\n            </header>\n            <JobAddFormContainer setIsPristine={setIsPristine} />\n        </Card>\n    </React.Fragment>;\n\nconst {\n  bool,\n  func\n} = PropTypes;\nJobAdd.propTypes = {\n  isPristine: bool.isRequired,\n  setIsPristine: func.isRequired\n};\nexport default JobAdd;","import React, { useState } from 'react';\nimport JobAdd from './JobAdd';\n\nconst JobAddContainer = () => {\n  const [isPristine, setIsPristine] = useState(true);\n  return <JobAdd isPristine={isPristine} setIsPristine={setIsPristine} />;\n};\n\nexport default JobAddContainer;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Router } from 'react-router';\nimport { JobListContainer } from '../../pages/JobList';\nimport { JobEditContainer } from '../../pages/JobEdit';\nimport { JobView } from '../../pages/JobView';\nimport { JobAddContainer } from '../../pages/JobAdd';\nimport history from '../../services/history';\n\nconst Routes = () => <Router history={history}>\n        <Route exact path=\"/\" component={JobListContainer} />\n        <Route path=\"/edit/:id\" component={JobEditContainer} />\n        <Route path=\"/view/:id\" component={JobView} />\n        <Route path=\"/add\" component={JobAddContainer} />\n    </Router>;\n\nexport default Routes;","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { CircularLoader, Layer, CenteredContent, NoticeBox } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { getAuthorized } from './selectors';\nimport styles from './AuthWall.module.css';\nconst query = {\n  me: {\n    resource: 'me'\n  }\n};\n\nconst AuthWall = ({\n  children\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query);\n\n  if (loading) {\n    return <Layer>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  if (error) {\n    /**\n     * The app can't continue if this fails, because it doesn't\n     * know if the user is authorized, so throw the error.\n     */\n    throw error;\n  }\n\n  const isAuthorized = getAuthorized(data.me);\n\n  if (!isAuthorized) {\n    return <div className={styles.noticeBoxWrapper}>\n                <NoticeBox error title={i18n.t('Not authorized')}>\n                    {i18n.t(\"You don't have access to the Job Scheduler. Contact a system administrator to request access.\")}\n                </NoticeBox>\n            </div>;\n  }\n\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nconst {\n  node\n} = PropTypes;\nAuthWall.propTypes = {\n  children: node.isRequired\n};\nexport default AuthWall;","export const getAuthorized = me => {\n  const {\n    authorities\n  } = me;\n\n  if (!authorities) {\n    return false;\n  }\n\n  const isAuthorized = authorities.includes('ALL') || authorities.includes('F_SCHEDULING_ADMIN');\n  return isAuthorized;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport styles from './PageWrapper.module.css';\n\nconst PageWrapper = ({\n  children\n}) => <div className={styles.wrapper}>{children}</div>;\n\nconst {\n  node\n} = PropTypes;\nPageWrapper.propTypes = {\n  children: node.isRequired\n};\nexport default PageWrapper;","import React from 'react';\nimport { CssVariables } from '@dhis2/ui';\nimport { Routes } from '../Routes';\nimport { AuthWall } from '../AuthWall';\nimport { Store } from '../Store';\nimport { PageWrapper } from '../PageWrapper';\nimport './App.css';\n\nconst App = () => <React.Fragment>\n        <CssVariables spacers colors />\n        <PageWrapper>\n            <AuthWall>\n                <Store>\n                    <Routes />\n                </Store>\n            </AuthWall>\n        </PageWrapper>\n    </React.Fragment>;\n\nexport default App;","export { default } from './App';"],"sourceRoot":""}